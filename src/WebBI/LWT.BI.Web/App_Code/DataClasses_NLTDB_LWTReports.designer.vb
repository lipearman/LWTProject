'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="LWTReports")>  _
Partial Public Class DataClasses_NLTDB_LWTReportsDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertV_NLT_Closing(instance As V_NLT_Closing)
    End Sub
  Partial Private Sub UpdateV_NLT_Closing(instance As V_NLT_Closing)
    End Sub
  Partial Private Sub DeleteV_NLT_Closing(instance As V_NLT_Closing)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("LWTReportsConnectionString1").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property V_NLT_Closings() As System.Data.Linq.Table(Of V_NLT_Closing)
		Get
			Return Me.GetTable(Of V_NLT_Closing)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_NLT_Closing")>  _
Partial Public Class V_NLT_Closing
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AID As Integer
	
	Private _clientCode As String
	
	Private _ClientName As String
	
	Private _ClosingDate As System.Nullable(Of Date)
	
	Private _Effective As System.Nullable(Of Date)
	
	Private _Project As String
	
	Private _CoverageType As String
	
	Private _Code1 As String
	
	Private _CarGroupName As String
	
	Private _GroupName As String
	
	Private _Chassis As String
	
	Private _Voluntary_TotalPremium As Decimal
	
	Private _CMI_TotalPremium As System.Nullable(Of Decimal)
	
	Private _TempID As String
	
	Private _Benefit As String
	
	Private _DealerCode As String
	
	Private _DealerName As String
	
	Private _NLTDealerCode As String
	
	Private _NLTArea As String
	
	Private _RegionName As String
	
	Private _LeasingName As String
	
	Private _TypeName As String
	
	Private _ModelName As String
	
	Private _HeadID As System.Nullable(Of Integer)
	
	Private _CarGroupId As System.Nullable(Of Integer)
	
	Private _TypeID As System.Nullable(Of Integer)
	
	Private _Status As Integer
	
	Private _IsActive As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAIDChanged()
    End Sub
    Partial Private Sub OnclientCodeChanging(value As String)
    End Sub
    Partial Private Sub OnclientCodeChanged()
    End Sub
    Partial Private Sub OnClientNameChanging(value As String)
    End Sub
    Partial Private Sub OnClientNameChanged()
    End Sub
    Partial Private Sub OnClosingDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnClosingDateChanged()
    End Sub
    Partial Private Sub OnEffectiveChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEffectiveChanged()
    End Sub
    Partial Private Sub OnProjectChanging(value As String)
    End Sub
    Partial Private Sub OnProjectChanged()
    End Sub
    Partial Private Sub OnCoverageTypeChanging(value As String)
    End Sub
    Partial Private Sub OnCoverageTypeChanged()
    End Sub
    Partial Private Sub OnCode1Changing(value As String)
    End Sub
    Partial Private Sub OnCode1Changed()
    End Sub
    Partial Private Sub OnCarGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnCarGroupNameChanged()
    End Sub
    Partial Private Sub OnGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnGroupNameChanged()
    End Sub
    Partial Private Sub OnChassisChanging(value As String)
    End Sub
    Partial Private Sub OnChassisChanged()
    End Sub
    Partial Private Sub OnVoluntary_TotalPremiumChanging(value As Decimal)
    End Sub
    Partial Private Sub OnVoluntary_TotalPremiumChanged()
    End Sub
    Partial Private Sub OnCMI_TotalPremiumChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCMI_TotalPremiumChanged()
    End Sub
    Partial Private Sub OnTempIDChanging(value As String)
    End Sub
    Partial Private Sub OnTempIDChanged()
    End Sub
    Partial Private Sub OnBenefitChanging(value As String)
    End Sub
    Partial Private Sub OnBenefitChanged()
    End Sub
    Partial Private Sub OnDealerCodeChanging(value As String)
    End Sub
    Partial Private Sub OnDealerCodeChanged()
    End Sub
    Partial Private Sub OnDealerNameChanging(value As String)
    End Sub
    Partial Private Sub OnDealerNameChanged()
    End Sub
    Partial Private Sub OnNLTDealerCodeChanging(value As String)
    End Sub
    Partial Private Sub OnNLTDealerCodeChanged()
    End Sub
    Partial Private Sub OnNLTAreaChanging(value As String)
    End Sub
    Partial Private Sub OnNLTAreaChanged()
    End Sub
    Partial Private Sub OnRegionNameChanging(value As String)
    End Sub
    Partial Private Sub OnRegionNameChanged()
    End Sub
    Partial Private Sub OnLeasingNameChanging(value As String)
    End Sub
    Partial Private Sub OnLeasingNameChanged()
    End Sub
    Partial Private Sub OnTypeNameChanging(value As String)
    End Sub
    Partial Private Sub OnTypeNameChanged()
    End Sub
    Partial Private Sub OnModelNameChanging(value As String)
    End Sub
    Partial Private Sub OnModelNameChanged()
    End Sub
    Partial Private Sub OnHeadIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnHeadIDChanged()
    End Sub
    Partial Private Sub OnCarGroupIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCarGroupIdChanged()
    End Sub
    Partial Private Sub OnTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTypeIDChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AID() As Integer
		Get
			Return Me._AID
		End Get
		Set
			If ((Me._AID = value)  _
						= false) Then
				Me.OnAIDChanging(value)
				Me.SendPropertyChanging
				Me._AID = value
				Me.SendPropertyChanged("AID")
				Me.OnAIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clientCode", DbType:="NVarChar(50)")>  _
	Public Property clientCode() As String
		Get
			Return Me._clientCode
		End Get
		Set
			If (String.Equals(Me._clientCode, value) = false) Then
				Me.OnclientCodeChanging(value)
				Me.SendPropertyChanging
				Me._clientCode = value
				Me.SendPropertyChanged("clientCode")
				Me.OnclientCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientName", DbType:="VarChar(101)")>  _
	Public Property ClientName() As String
		Get
			Return Me._ClientName
		End Get
		Set
			If (String.Equals(Me._ClientName, value) = false) Then
				Me.OnClientNameChanging(value)
				Me.SendPropertyChanging
				Me._ClientName = value
				Me.SendPropertyChanged("ClientName")
				Me.OnClientNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClosingDate", DbType:="DateTime")>  _
	Public Property ClosingDate() As System.Nullable(Of Date)
		Get
			Return Me._ClosingDate
		End Get
		Set
			If (Me._ClosingDate.Equals(value) = false) Then
				Me.OnClosingDateChanging(value)
				Me.SendPropertyChanging
				Me._ClosingDate = value
				Me.SendPropertyChanged("ClosingDate")
				Me.OnClosingDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Effective", DbType:="DateTime")>  _
	Public Property Effective() As System.Nullable(Of Date)
		Get
			Return Me._Effective
		End Get
		Set
			If (Me._Effective.Equals(value) = false) Then
				Me.OnEffectiveChanging(value)
				Me.SendPropertyChanging
				Me._Effective = value
				Me.SendPropertyChanged("Effective")
				Me.OnEffectiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Project", DbType:="VarChar(50)")>  _
	Public Property Project() As String
		Get
			Return Me._Project
		End Get
		Set
			If (String.Equals(Me._Project, value) = false) Then
				Me.OnProjectChanging(value)
				Me.SendPropertyChanging
				Me._Project = value
				Me.SendPropertyChanged("Project")
				Me.OnProjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CoverageType", DbType:="VarChar(50)")>  _
	Public Property CoverageType() As String
		Get
			Return Me._CoverageType
		End Get
		Set
			If (String.Equals(Me._CoverageType, value) = false) Then
				Me.OnCoverageTypeChanging(value)
				Me.SendPropertyChanging
				Me._CoverageType = value
				Me.SendPropertyChanged("CoverageType")
				Me.OnCoverageTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code1", DbType:="VarChar(50)")>  _
	Public Property Code1() As String
		Get
			Return Me._Code1
		End Get
		Set
			If (String.Equals(Me._Code1, value) = false) Then
				Me.OnCode1Changing(value)
				Me.SendPropertyChanging
				Me._Code1 = value
				Me.SendPropertyChanged("Code1")
				Me.OnCode1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CarGroupName", DbType:="VarChar(128)")>  _
	Public Property CarGroupName() As String
		Get
			Return Me._CarGroupName
		End Get
		Set
			If (String.Equals(Me._CarGroupName, value) = false) Then
				Me.OnCarGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._CarGroupName = value
				Me.SendPropertyChanged("CarGroupName")
				Me.OnCarGroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupName", DbType:="NVarChar(255)")>  _
	Public Property GroupName() As String
		Get
			Return Me._GroupName
		End Get
		Set
			If (String.Equals(Me._GroupName, value) = false) Then
				Me.OnGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._GroupName = value
				Me.SendPropertyChanged("GroupName")
				Me.OnGroupNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Chassis", DbType:="VarChar(50)")>  _
	Public Property Chassis() As String
		Get
			Return Me._Chassis
		End Get
		Set
			If (String.Equals(Me._Chassis, value) = false) Then
				Me.OnChassisChanging(value)
				Me.SendPropertyChanging
				Me._Chassis = value
				Me.SendPropertyChanged("Chassis")
				Me.OnChassisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Voluntary_TotalPremium", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property Voluntary_TotalPremium() As Decimal
		Get
			Return Me._Voluntary_TotalPremium
		End Get
		Set
			If ((Me._Voluntary_TotalPremium = value)  _
						= false) Then
				Me.OnVoluntary_TotalPremiumChanging(value)
				Me.SendPropertyChanging
				Me._Voluntary_TotalPremium = value
				Me.SendPropertyChanged("Voluntary_TotalPremium")
				Me.OnVoluntary_TotalPremiumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMI_TotalPremium", DbType:="Decimal(18,2)")>  _
	Public Property CMI_TotalPremium() As System.Nullable(Of Decimal)
		Get
			Return Me._CMI_TotalPremium
		End Get
		Set
			If (Me._CMI_TotalPremium.Equals(value) = false) Then
				Me.OnCMI_TotalPremiumChanging(value)
				Me.SendPropertyChanging
				Me._CMI_TotalPremium = value
				Me.SendPropertyChanged("CMI_TotalPremium")
				Me.OnCMI_TotalPremiumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TempID", DbType:="VarChar(50)")>  _
	Public Property TempID() As String
		Get
			Return Me._TempID
		End Get
		Set
			If (String.Equals(Me._TempID, value) = false) Then
				Me.OnTempIDChanging(value)
				Me.SendPropertyChanging
				Me._TempID = value
				Me.SendPropertyChanged("TempID")
				Me.OnTempIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Benefit", DbType:="NVarChar(100)")>  _
	Public Property Benefit() As String
		Get
			Return Me._Benefit
		End Get
		Set
			If (String.Equals(Me._Benefit, value) = false) Then
				Me.OnBenefitChanging(value)
				Me.SendPropertyChanging
				Me._Benefit = value
				Me.SendPropertyChanged("Benefit")
				Me.OnBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DealerCode", DbType:="VarChar(50)")>  _
	Public Property DealerCode() As String
		Get
			Return Me._DealerCode
		End Get
		Set
			If (String.Equals(Me._DealerCode, value) = false) Then
				Me.OnDealerCodeChanging(value)
				Me.SendPropertyChanging
				Me._DealerCode = value
				Me.SendPropertyChanged("DealerCode")
				Me.OnDealerCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DealerName", DbType:="NVarChar(255)")>  _
	Public Property DealerName() As String
		Get
			Return Me._DealerName
		End Get
		Set
			If (String.Equals(Me._DealerName, value) = false) Then
				Me.OnDealerNameChanging(value)
				Me.SendPropertyChanging
				Me._DealerName = value
				Me.SendPropertyChanged("DealerName")
				Me.OnDealerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NLTDealerCode", DbType:="VarChar(50)")>  _
	Public Property NLTDealerCode() As String
		Get
			Return Me._NLTDealerCode
		End Get
		Set
			If (String.Equals(Me._NLTDealerCode, value) = false) Then
				Me.OnNLTDealerCodeChanging(value)
				Me.SendPropertyChanging
				Me._NLTDealerCode = value
				Me.SendPropertyChanged("NLTDealerCode")
				Me.OnNLTDealerCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NLTArea", DbType:="VarChar(50)")>  _
	Public Property NLTArea() As String
		Get
			Return Me._NLTArea
		End Get
		Set
			If (String.Equals(Me._NLTArea, value) = false) Then
				Me.OnNLTAreaChanging(value)
				Me.SendPropertyChanging
				Me._NLTArea = value
				Me.SendPropertyChanged("NLTArea")
				Me.OnNLTAreaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegionName", DbType:="NVarChar(150)")>  _
	Public Property RegionName() As String
		Get
			Return Me._RegionName
		End Get
		Set
			If (String.Equals(Me._RegionName, value) = false) Then
				Me.OnRegionNameChanging(value)
				Me.SendPropertyChanging
				Me._RegionName = value
				Me.SendPropertyChanged("RegionName")
				Me.OnRegionNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LeasingName", DbType:="NVarChar(100)")>  _
	Public Property LeasingName() As String
		Get
			Return Me._LeasingName
		End Get
		Set
			If (String.Equals(Me._LeasingName, value) = false) Then
				Me.OnLeasingNameChanging(value)
				Me.SendPropertyChanging
				Me._LeasingName = value
				Me.SendPropertyChanged("LeasingName")
				Me.OnLeasingNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeName", DbType:="NVarChar(50)")>  _
	Public Property TypeName() As String
		Get
			Return Me._TypeName
		End Get
		Set
			If (String.Equals(Me._TypeName, value) = false) Then
				Me.OnTypeNameChanging(value)
				Me.SendPropertyChanging
				Me._TypeName = value
				Me.SendPropertyChanged("TypeName")
				Me.OnTypeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModelName", DbType:="NVarChar(255)")>  _
	Public Property ModelName() As String
		Get
			Return Me._ModelName
		End Get
		Set
			If (String.Equals(Me._ModelName, value) = false) Then
				Me.OnModelNameChanging(value)
				Me.SendPropertyChanging
				Me._ModelName = value
				Me.SendPropertyChanged("ModelName")
				Me.OnModelNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeadID", DbType:="Int")>  _
	Public Property HeadID() As System.Nullable(Of Integer)
		Get
			Return Me._HeadID
		End Get
		Set
			If (Me._HeadID.Equals(value) = false) Then
				Me.OnHeadIDChanging(value)
				Me.SendPropertyChanging
				Me._HeadID = value
				Me.SendPropertyChanged("HeadID")
				Me.OnHeadIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CarGroupId", DbType:="Int")>  _
	Public Property CarGroupId() As System.Nullable(Of Integer)
		Get
			Return Me._CarGroupId
		End Get
		Set
			If (Me._CarGroupId.Equals(value) = false) Then
				Me.OnCarGroupIdChanging(value)
				Me.SendPropertyChanging
				Me._CarGroupId = value
				Me.SendPropertyChanged("CarGroupId")
				Me.OnCarGroupIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeID", DbType:="Int")>  _
	Public Property TypeID() As System.Nullable(Of Integer)
		Get
			Return Me._TypeID
		End Get
		Set
			If (Me._TypeID.Equals(value) = false) Then
				Me.OnTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._TypeID = value
				Me.SendPropertyChanged("TypeID")
				Me.OnTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int NOT NULL")>  _
	Public Property Status() As Integer
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Int")>  _
	Public Property IsActive() As System.Nullable(Of Integer)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
