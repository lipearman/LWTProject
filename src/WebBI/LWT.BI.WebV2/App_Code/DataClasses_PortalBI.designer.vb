'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Portal.BI")>  _
Partial Public Class DataClasses_PortalBIDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttblPivotGridViewOption(instance As tblPivotGridViewOption)
    End Sub
  Partial Private Sub UpdatetblPivotGridViewOption(instance As tblPivotGridViewOption)
    End Sub
  Partial Private Sub DeletetblPivotGridViewOption(instance As tblPivotGridViewOption)
    End Sub
  Partial Private Sub InserttblBIAssignment(instance As tblBIAssignment)
    End Sub
  Partial Private Sub UpdatetblBIAssignment(instance As tblBIAssignment)
    End Sub
  Partial Private Sub DeletetblBIAssignment(instance As tblBIAssignment)
    End Sub
  Partial Private Sub InserttblBIFilter(instance As tblBIFilter)
    End Sub
  Partial Private Sub UpdatetblBIFilter(instance As tblBIFilter)
    End Sub
  Partial Private Sub DeletetblBIFilter(instance As tblBIFilter)
    End Sub
  Partial Private Sub InserttblBIFilter_User(instance As tblBIFilter_User)
    End Sub
  Partial Private Sub UpdatetblBIFilter_User(instance As tblBIFilter_User)
    End Sub
  Partial Private Sub DeletetblBIFilter_User(instance As tblBIFilter_User)
    End Sub
  Partial Private Sub InserttblCube(instance As tblCube)
    End Sub
  Partial Private Sub UpdatetblCube(instance As tblCube)
    End Sub
  Partial Private Sub DeletetblCube(instance As tblCube)
    End Sub
  Partial Private Sub InserttblCube_User(instance As tblCube_User)
    End Sub
  Partial Private Sub UpdatetblCube_User(instance As tblCube_User)
    End Sub
  Partial Private Sub DeletetblCube_User(instance As tblCube_User)
    End Sub
  Partial Private Sub InserttblDashBoard_Assignment(instance As tblDashBoard_Assignment)
    End Sub
  Partial Private Sub UpdatetblDashBoard_Assignment(instance As tblDashBoard_Assignment)
    End Sub
  Partial Private Sub DeletetblDashBoard_Assignment(instance As tblDashBoard_Assignment)
    End Sub
  Partial Private Sub InserttblDataSource(instance As tblDataSource)
    End Sub
  Partial Private Sub UpdatetblDataSource(instance As tblDataSource)
    End Sub
  Partial Private Sub DeletetblDataSource(instance As tblDataSource)
    End Sub
  Partial Private Sub InserttblDataSourceBI_Field_Filter(instance As tblDataSourceBI_Field_Filter)
    End Sub
  Partial Private Sub UpdatetblDataSourceBI_Field_Filter(instance As tblDataSourceBI_Field_Filter)
    End Sub
  Partial Private Sub DeletetblDataSourceBI_Field_Filter(instance As tblDataSourceBI_Field_Filter)
    End Sub
  Partial Private Sub InserttblDataSourceBI_Assignment(instance As tblDataSourceBI_Assignment)
    End Sub
  Partial Private Sub UpdatetblDataSourceBI_Assignment(instance As tblDataSourceBI_Assignment)
    End Sub
  Partial Private Sub DeletetblDataSourceBI_Assignment(instance As tblDataSourceBI_Assignment)
    End Sub
  Partial Private Sub InserttblDataSourceBI_Field(instance As tblDataSourceBI_Field)
    End Sub
  Partial Private Sub UpdatetblDataSourceBI_Field(instance As tblDataSourceBI_Field)
    End Sub
  Partial Private Sub DeletetblDataSourceBI_Field(instance As tblDataSourceBI_Field)
    End Sub
  Partial Private Sub InserttblDataSourceFile_Field(instance As tblDataSourceFile_Field)
    End Sub
  Partial Private Sub UpdatetblDataSourceFile_Field(instance As tblDataSourceFile_Field)
    End Sub
  Partial Private Sub DeletetblDataSourceFile_Field(instance As tblDataSourceFile_Field)
    End Sub
  Partial Private Sub InserttblBI_User(instance As tblBI_User)
    End Sub
  Partial Private Sub UpdatetblBI_User(instance As tblBI_User)
    End Sub
  Partial Private Sub DeletetblBI_User(instance As tblBI_User)
    End Sub
  Partial Private Sub InserttblBIAttribute_User(instance As tblBIAttribute_User)
    End Sub
  Partial Private Sub UpdatetblBIAttribute_User(instance As tblBIAttribute_User)
    End Sub
  Partial Private Sub DeletetblBIAttribute_User(instance As tblBIAttribute_User)
    End Sub
  Partial Private Sub InserttblBIAttribute(instance As tblBIAttribute)
    End Sub
  Partial Private Sub UpdatetblBIAttribute(instance As tblBIAttribute)
    End Sub
  Partial Private Sub DeletetblBIAttribute(instance As tblBIAttribute)
    End Sub
  Partial Private Sub InserttblAttribute(instance As tblAttribute)
    End Sub
  Partial Private Sub UpdatetblAttribute(instance As tblAttribute)
    End Sub
  Partial Private Sub DeletetblAttribute(instance As tblAttribute)
    End Sub
  Partial Private Sub InserttblDashBoard_DataSource_Assignment(instance As tblDashBoard_DataSource_Assignment)
    End Sub
  Partial Private Sub UpdatetblDashBoard_DataSource_Assignment(instance As tblDashBoard_DataSource_Assignment)
    End Sub
  Partial Private Sub DeletetblDashBoard_DataSource_Assignment(instance As tblDashBoard_DataSource_Assignment)
    End Sub
  Partial Private Sub InserttblDashBoard_DataSource(instance As tblDashBoard_DataSource)
    End Sub
  Partial Private Sub UpdatetblDashBoard_DataSource(instance As tblDashBoard_DataSource)
    End Sub
  Partial Private Sub DeletetblDashBoard_DataSource(instance As tblDashBoard_DataSource)
    End Sub
  Partial Private Sub InserttblDataSourceFile(instance As tblDataSourceFile)
    End Sub
  Partial Private Sub UpdatetblDataSourceFile(instance As tblDataSourceFile)
    End Sub
  Partial Private Sub DeletetblDataSourceFile(instance As tblDataSourceFile)
    End Sub
  Partial Private Sub InserttblDataSourceBI(instance As tblDataSourceBI)
    End Sub
  Partial Private Sub UpdatetblDataSourceBI(instance As tblDataSourceBI)
    End Sub
  Partial Private Sub DeletetblDataSourceBI(instance As tblDataSourceBI)
    End Sub
  Partial Private Sub InserttblDashBoard(instance As tblDashBoard)
    End Sub
  Partial Private Sub UpdatetblDashBoard(instance As tblDashBoard)
    End Sub
  Partial Private Sub DeletetblDashBoard(instance As tblDashBoard)
    End Sub
  Partial Private Sub InserttblBI(instance As tblBI)
    End Sub
  Partial Private Sub UpdatetblBI(instance As tblBI)
    End Sub
  Partial Private Sub DeletetblBI(instance As tblBI)
    End Sub
  Partial Private Sub InserttblDashBoard_Data(instance As tblDashBoard_Data)
    End Sub
  Partial Private Sub UpdatetblDashBoard_Data(instance As tblDashBoard_Data)
    End Sub
  Partial Private Sub DeletetblDashBoard_Data(instance As tblDashBoard_Data)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("PortalBIConnection").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tblPivotGridViewOptions() As System.Data.Linq.Table(Of tblPivotGridViewOption)
		Get
			Return Me.GetTable(Of tblPivotGridViewOption)
		End Get
	End Property
	
	Public ReadOnly Property tblBIAssignments() As System.Data.Linq.Table(Of tblBIAssignment)
		Get
			Return Me.GetTable(Of tblBIAssignment)
		End Get
	End Property
	
	Public ReadOnly Property tblBIFilters() As System.Data.Linq.Table(Of tblBIFilter)
		Get
			Return Me.GetTable(Of tblBIFilter)
		End Get
	End Property
	
	Public ReadOnly Property tblBIFilter_Users() As System.Data.Linq.Table(Of tblBIFilter_User)
		Get
			Return Me.GetTable(Of tblBIFilter_User)
		End Get
	End Property
	
	Public ReadOnly Property tblCubes() As System.Data.Linq.Table(Of tblCube)
		Get
			Return Me.GetTable(Of tblCube)
		End Get
	End Property
	
	Public ReadOnly Property tblCube_Users() As System.Data.Linq.Table(Of tblCube_User)
		Get
			Return Me.GetTable(Of tblCube_User)
		End Get
	End Property
	
	Public ReadOnly Property tblDashBoard_Assignments() As System.Data.Linq.Table(Of tblDashBoard_Assignment)
		Get
			Return Me.GetTable(Of tblDashBoard_Assignment)
		End Get
	End Property
	
	Public ReadOnly Property tblDataSources() As System.Data.Linq.Table(Of tblDataSource)
		Get
			Return Me.GetTable(Of tblDataSource)
		End Get
	End Property
	
	Public ReadOnly Property V_Attributes() As System.Data.Linq.Table(Of V_Attribute)
		Get
			Return Me.GetTable(Of V_Attribute)
		End Get
	End Property
	
	Public ReadOnly Property V_DMX_Measures() As System.Data.Linq.Table(Of V_DMX_Measure)
		Get
			Return Me.GetTable(Of V_DMX_Measure)
		End Get
	End Property
	
	Public ReadOnly Property V_BIAttributes() As System.Data.Linq.Table(Of V_BIAttribute)
		Get
			Return Me.GetTable(Of V_BIAttribute)
		End Get
	End Property
	
	Public ReadOnly Property V_BIAttribute_Users() As System.Data.Linq.Table(Of V_BIAttribute_User)
		Get
			Return Me.GetTable(Of V_BIAttribute_User)
		End Get
	End Property
	
	Public ReadOnly Property V_Cubes() As System.Data.Linq.Table(Of V_Cube)
		Get
			Return Me.GetTable(Of V_Cube)
		End Get
	End Property
	
	Public ReadOnly Property V_DMX_Attributes() As System.Data.Linq.Table(Of V_DMX_Attribute)
		Get
			Return Me.GetTable(Of V_DMX_Attribute)
		End Get
	End Property
	
	Public ReadOnly Property V_DMX_Cubes() As System.Data.Linq.Table(Of V_DMX_Cube)
		Get
			Return Me.GetTable(Of V_DMX_Cube)
		End Get
	End Property
	
	Public ReadOnly Property V_DMX_Dimensions() As System.Data.Linq.Table(Of V_DMX_Dimension)
		Get
			Return Me.GetTable(Of V_DMX_Dimension)
		End Get
	End Property
	
	Public ReadOnly Property V_DMX_Hierarchies() As System.Data.Linq.Table(Of V_DMX_Hierarchy)
		Get
			Return Me.GetTable(Of V_DMX_Hierarchy)
		End Get
	End Property
	
	Public ReadOnly Property tblDataSourceBI_Field_Filters() As System.Data.Linq.Table(Of tblDataSourceBI_Field_Filter)
		Get
			Return Me.GetTable(Of tblDataSourceBI_Field_Filter)
		End Get
	End Property
	
	Public ReadOnly Property tblDataSourceBI_Assignments() As System.Data.Linq.Table(Of tblDataSourceBI_Assignment)
		Get
			Return Me.GetTable(Of tblDataSourceBI_Assignment)
		End Get
	End Property
	
	Public ReadOnly Property tblDataSourceBI_Fields() As System.Data.Linq.Table(Of tblDataSourceBI_Field)
		Get
			Return Me.GetTable(Of tblDataSourceBI_Field)
		End Get
	End Property
	
	Public ReadOnly Property tblDataSourceFile_Fields() As System.Data.Linq.Table(Of tblDataSourceFile_Field)
		Get
			Return Me.GetTable(Of tblDataSourceFile_Field)
		End Get
	End Property
	
	Public ReadOnly Property tblBI_Users() As System.Data.Linq.Table(Of tblBI_User)
		Get
			Return Me.GetTable(Of tblBI_User)
		End Get
	End Property
	
	Public ReadOnly Property tblBIAttribute_Users() As System.Data.Linq.Table(Of tblBIAttribute_User)
		Get
			Return Me.GetTable(Of tblBIAttribute_User)
		End Get
	End Property
	
	Public ReadOnly Property tblBIAttributes() As System.Data.Linq.Table(Of tblBIAttribute)
		Get
			Return Me.GetTable(Of tblBIAttribute)
		End Get
	End Property
	
	Public ReadOnly Property tblAttributes() As System.Data.Linq.Table(Of tblAttribute)
		Get
			Return Me.GetTable(Of tblAttribute)
		End Get
	End Property
	
	Public ReadOnly Property tblDashBoard_DataSource_Assignments() As System.Data.Linq.Table(Of tblDashBoard_DataSource_Assignment)
		Get
			Return Me.GetTable(Of tblDashBoard_DataSource_Assignment)
		End Get
	End Property
	
	Public ReadOnly Property tblDashBoard_DataSources() As System.Data.Linq.Table(Of tblDashBoard_DataSource)
		Get
			Return Me.GetTable(Of tblDashBoard_DataSource)
		End Get
	End Property
	
	Public ReadOnly Property tblDataSourceFiles() As System.Data.Linq.Table(Of tblDataSourceFile)
		Get
			Return Me.GetTable(Of tblDataSourceFile)
		End Get
	End Property
	
	Public ReadOnly Property tblDataSourceBIs() As System.Data.Linq.Table(Of tblDataSourceBI)
		Get
			Return Me.GetTable(Of tblDataSourceBI)
		End Get
	End Property
	
	Public ReadOnly Property V_DataSourceBI_Assignments() As System.Data.Linq.Table(Of V_DataSourceBI_Assignment)
		Get
			Return Me.GetTable(Of V_DataSourceBI_Assignment)
		End Get
	End Property
	
	Public ReadOnly Property tblDashBoards() As System.Data.Linq.Table(Of tblDashBoard)
		Get
			Return Me.GetTable(Of tblDashBoard)
		End Get
	End Property
	
	Public ReadOnly Property V_DataSources() As System.Data.Linq.Table(Of V_DataSource)
		Get
			Return Me.GetTable(Of V_DataSource)
		End Get
	End Property
	
	Public ReadOnly Property tblBIs() As System.Data.Linq.Table(Of tblBI)
		Get
			Return Me.GetTable(Of tblBI)
		End Get
	End Property
	
	Public ReadOnly Property V_Dashboard_Datas() As System.Data.Linq.Table(Of V_Dashboard_Data)
		Get
			Return Me.GetTable(Of V_Dashboard_Data)
		End Get
	End Property
	
	Public ReadOnly Property tblDashBoard_Datas() As System.Data.Linq.Table(Of tblDashBoard_Data)
		Get
			Return Me.GetTable(Of tblDashBoard_Data)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_ssis_eglobal")>  _
	Public Function sp_ssis_eglobal() As ISingleResult(Of sp_ssis_eglobalResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of sp_ssis_eglobalResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblPivotGridViewOption")>  _
Partial Public Class tblPivotGridViewOption
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Value As System.Nullable(Of Integer)
	
	Private _GroupName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnGroupNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Int")>  _
	Public Property Value() As System.Nullable(Of Integer)
		Get
			Return Me._Value
		End Get
		Set
			If (Me._Value.Equals(value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupName", DbType:="VarChar(50)")>  _
	Public Property GroupName() As String
		Get
			Return Me._GroupName
		End Get
		Set
			If (String.Equals(Me._GroupName, value) = false) Then
				Me.OnGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._GroupName = value
				Me.SendPropertyChanged("GroupName")
				Me.OnGroupNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBIAssignment")>  _
Partial Public Class tblBIAssignment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _BID As Integer
	
	Private _USERNAME As String
	
	Private _tblBI As EntityRef(Of tblBI)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnBIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBIDChanged()
    End Sub
    Partial Private Sub OnUSERNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnUSERNAMEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblBI = CType(Nothing, EntityRef(Of tblBI))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BID", DbType:="Int NOT NULL")>  _
	Public Property BID() As Integer
		Get
			Return Me._BID
		End Get
		Set
			If ((Me._BID = value)  _
						= false) Then
				If Me._tblBI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBIDChanging(value)
				Me.SendPropertyChanging
				Me._BID = value
				Me.SendPropertyChanged("BID")
				Me.OnBIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USERNAME", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property USERNAME() As String
		Get
			Return Me._USERNAME
		End Get
		Set
			If (String.Equals(Me._USERNAME, value) = false) Then
				Me.OnUSERNAMEChanging(value)
				Me.SendPropertyChanging
				Me._USERNAME = value
				Me.SendPropertyChanged("USERNAME")
				Me.OnUSERNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBI_tblBIAssignment", Storage:="_tblBI", ThisKey:="BID", OtherKey:="BID", IsForeignKey:=true)>  _
	Public Property tblBI() As tblBI
		Get
			Return Me._tblBI.Entity
		End Get
		Set
			Dim previousValue As tblBI = Me._tblBI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblBI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblBI.Entity = Nothing
					previousValue.tblBIAssignments.Remove(Me)
				End If
				Me._tblBI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblBIAssignments.Add(Me)
					Me._BID = value.BID
				Else
					Me._BID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblBI")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBIFilter")>  _
Partial Public Class tblBIFilter
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FILTER_ID As Integer
	
	Private _FIELD As String
	
	Private _BID As Integer
	
	Private _FILTER_VALUE As String
	
	Private _FILTER_TYPE As String
	
	Private _tblBIAttribute As EntityRef(Of tblBIAttribute)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFILTER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFILTER_IDChanged()
    End Sub
    Partial Private Sub OnFIELDChanging(value As String)
    End Sub
    Partial Private Sub OnFIELDChanged()
    End Sub
    Partial Private Sub OnBIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBIDChanged()
    End Sub
    Partial Private Sub OnFILTER_VALUEChanging(value As String)
    End Sub
    Partial Private Sub OnFILTER_VALUEChanged()
    End Sub
    Partial Private Sub OnFILTER_TYPEChanging(value As String)
    End Sub
    Partial Private Sub OnFILTER_TYPEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblBIAttribute = CType(Nothing, EntityRef(Of tblBIAttribute))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILTER_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property FILTER_ID() As Integer
		Get
			Return Me._FILTER_ID
		End Get
		Set
			If ((Me._FILTER_ID = value)  _
						= false) Then
				Me.OnFILTER_IDChanging(value)
				Me.SendPropertyChanging
				Me._FILTER_ID = value
				Me.SendPropertyChanged("FILTER_ID")
				Me.OnFILTER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property FIELD() As String
		Get
			Return Me._FIELD
		End Get
		Set
			If (String.Equals(Me._FIELD, value) = false) Then
				If Me._tblBIAttribute.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFIELDChanging(value)
				Me.SendPropertyChanging
				Me._FIELD = value
				Me.SendPropertyChanged("FIELD")
				Me.OnFIELDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BID", DbType:="Int NOT NULL")>  _
	Public Property BID() As Integer
		Get
			Return Me._BID
		End Get
		Set
			If ((Me._BID = value)  _
						= false) Then
				If Me._tblBIAttribute.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBIDChanging(value)
				Me.SendPropertyChanging
				Me._BID = value
				Me.SendPropertyChanged("BID")
				Me.OnBIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILTER_VALUE", DbType:="VarChar(255)")>  _
	Public Property FILTER_VALUE() As String
		Get
			Return Me._FILTER_VALUE
		End Get
		Set
			If (String.Equals(Me._FILTER_VALUE, value) = false) Then
				Me.OnFILTER_VALUEChanging(value)
				Me.SendPropertyChanging
				Me._FILTER_VALUE = value
				Me.SendPropertyChanged("FILTER_VALUE")
				Me.OnFILTER_VALUEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILTER_TYPE", DbType:="VarChar(50)")>  _
	Public Property FILTER_TYPE() As String
		Get
			Return Me._FILTER_TYPE
		End Get
		Set
			If (String.Equals(Me._FILTER_TYPE, value) = false) Then
				Me.OnFILTER_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._FILTER_TYPE = value
				Me.SendPropertyChanged("FILTER_TYPE")
				Me.OnFILTER_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBIAttribute_tblBIFilter", Storage:="_tblBIAttribute", ThisKey:="FIELD,BID", OtherKey:="FIELD,BID", IsForeignKey:=true)>  _
	Public Property tblBIAttribute() As tblBIAttribute
		Get
			Return Me._tblBIAttribute.Entity
		End Get
		Set
			Dim previousValue As tblBIAttribute = Me._tblBIAttribute.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblBIAttribute.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblBIAttribute.Entity = Nothing
					previousValue.tblBIFilters.Remove(Me)
				End If
				Me._tblBIAttribute.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblBIFilters.Add(Me)
					Me._FIELD = value.FIELD
					Me._BID = value.BID
				Else
					Me._FIELD = CType(Nothing, String)
					Me._BID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblBIAttribute")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBIFilter_User")>  _
Partial Public Class tblBIFilter_User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FILTER_ID As Integer
	
	Private _FIELD As String
	
	Private _BUID As Integer
	
	Private _FILTER_VALUE As String
	
	Private _FILTER_TYPE As String
	
	Private _tblBIAttribute_User As EntityRef(Of tblBIAttribute_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFILTER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFILTER_IDChanged()
    End Sub
    Partial Private Sub OnFIELDChanging(value As String)
    End Sub
    Partial Private Sub OnFIELDChanged()
    End Sub
    Partial Private Sub OnBUIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBUIDChanged()
    End Sub
    Partial Private Sub OnFILTER_VALUEChanging(value As String)
    End Sub
    Partial Private Sub OnFILTER_VALUEChanged()
    End Sub
    Partial Private Sub OnFILTER_TYPEChanging(value As String)
    End Sub
    Partial Private Sub OnFILTER_TYPEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblBIAttribute_User = CType(Nothing, EntityRef(Of tblBIAttribute_User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILTER_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property FILTER_ID() As Integer
		Get
			Return Me._FILTER_ID
		End Get
		Set
			If ((Me._FILTER_ID = value)  _
						= false) Then
				Me.OnFILTER_IDChanging(value)
				Me.SendPropertyChanging
				Me._FILTER_ID = value
				Me.SendPropertyChanged("FILTER_ID")
				Me.OnFILTER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property FIELD() As String
		Get
			Return Me._FIELD
		End Get
		Set
			If (String.Equals(Me._FIELD, value) = false) Then
				If Me._tblBIAttribute_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFIELDChanging(value)
				Me.SendPropertyChanging
				Me._FIELD = value
				Me.SendPropertyChanged("FIELD")
				Me.OnFIELDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BUID", DbType:="Int NOT NULL")>  _
	Public Property BUID() As Integer
		Get
			Return Me._BUID
		End Get
		Set
			If ((Me._BUID = value)  _
						= false) Then
				If Me._tblBIAttribute_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBUIDChanging(value)
				Me.SendPropertyChanging
				Me._BUID = value
				Me.SendPropertyChanged("BUID")
				Me.OnBUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILTER_VALUE", DbType:="VarChar(255)")>  _
	Public Property FILTER_VALUE() As String
		Get
			Return Me._FILTER_VALUE
		End Get
		Set
			If (String.Equals(Me._FILTER_VALUE, value) = false) Then
				Me.OnFILTER_VALUEChanging(value)
				Me.SendPropertyChanging
				Me._FILTER_VALUE = value
				Me.SendPropertyChanged("FILTER_VALUE")
				Me.OnFILTER_VALUEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILTER_TYPE", DbType:="VarChar(50)")>  _
	Public Property FILTER_TYPE() As String
		Get
			Return Me._FILTER_TYPE
		End Get
		Set
			If (String.Equals(Me._FILTER_TYPE, value) = false) Then
				Me.OnFILTER_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._FILTER_TYPE = value
				Me.SendPropertyChanged("FILTER_TYPE")
				Me.OnFILTER_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBIAttribute_User_tblBIFilter_User", Storage:="_tblBIAttribute_User", ThisKey:="FIELD,BUID", OtherKey:="FIELD,BUID", IsForeignKey:=true)>  _
	Public Property tblBIAttribute_User() As tblBIAttribute_User
		Get
			Return Me._tblBIAttribute_User.Entity
		End Get
		Set
			Dim previousValue As tblBIAttribute_User = Me._tblBIAttribute_User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblBIAttribute_User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblBIAttribute_User.Entity = Nothing
					previousValue.tblBIFilter_Users.Remove(Me)
				End If
				Me._tblBIAttribute_User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblBIFilter_Users.Add(Me)
					Me._FIELD = value.FIELD
					Me._BUID = value.BUID
				Else
					Me._FIELD = CType(Nothing, String)
					Me._BUID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblBIAttribute_User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCube")>  _
Partial Public Class tblCube
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CUBE_ID As Integer
	
	Private _DATABASE As String
	
	Private _CUBE As String
	
	Private _BASE_CUBE_NAME As String
	
	Private _tblAttributes As EntitySet(Of tblAttribute)
	
	Private _tblDataSource As EntityRef(Of tblDataSource)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCUBE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCUBE_IDChanged()
    End Sub
    Partial Private Sub OnDATABASEChanging(value As String)
    End Sub
    Partial Private Sub OnDATABASEChanged()
    End Sub
    Partial Private Sub OnCUBEChanging(value As String)
    End Sub
    Partial Private Sub OnCUBEChanged()
    End Sub
    Partial Private Sub OnBASE_CUBE_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnBASE_CUBE_NAMEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblAttributes = New EntitySet(Of tblAttribute)(AddressOf Me.attach_tblAttributes, AddressOf Me.detach_tblAttributes)
		Me._tblDataSource = CType(Nothing, EntityRef(Of tblDataSource))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CUBE_ID() As Integer
		Get
			Return Me._CUBE_ID
		End Get
		Set
			If ((Me._CUBE_ID = value)  _
						= false) Then
				Me.OnCUBE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CUBE_ID = value
				Me.SendPropertyChanged("CUBE_ID")
				Me.OnCUBE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[DATABASE]", Storage:="_DATABASE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DATABASE() As String
		Get
			Return Me._DATABASE
		End Get
		Set
			If (String.Equals(Me._DATABASE, value) = false) Then
				Me.OnDATABASEChanging(value)
				Me.SendPropertyChanging
				Me._DATABASE = value
				Me.SendPropertyChanged("DATABASE")
				Me.OnDATABASEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CUBE() As String
		Get
			Return Me._CUBE
		End Get
		Set
			If (String.Equals(Me._CUBE, value) = false) Then
				Me.OnCUBEChanging(value)
				Me.SendPropertyChanging
				Me._CUBE = value
				Me.SendPropertyChanged("CUBE")
				Me.OnCUBEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BASE_CUBE_NAME", DbType:="VarChar(50)")>  _
	Public Property BASE_CUBE_NAME() As String
		Get
			Return Me._BASE_CUBE_NAME
		End Get
		Set
			If (String.Equals(Me._BASE_CUBE_NAME, value) = false) Then
				Me.OnBASE_CUBE_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._BASE_CUBE_NAME = value
				Me.SendPropertyChanged("BASE_CUBE_NAME")
				Me.OnBASE_CUBE_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCube_tblAttribute", Storage:="_tblAttributes", ThisKey:="CUBE_ID", OtherKey:="CUBE_ID")>  _
	Public Property tblAttributes() As EntitySet(Of tblAttribute)
		Get
			Return Me._tblAttributes
		End Get
		Set
			Me._tblAttributes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblDataSource_tblCube", Storage:="_tblDataSource", ThisKey:="DATABASE", OtherKey:="DATABASE", IsForeignKey:=true)>  _
	Public Property tblDataSource() As tblDataSource
		Get
			Return Me._tblDataSource.Entity
		End Get
		Set
			Dim previousValue As tblDataSource = Me._tblDataSource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblDataSource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblDataSource.Entity = Nothing
					previousValue.tblCubes.Remove(Me)
				End If
				Me._tblDataSource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblCubes.Add(Me)
					Me._DATABASE = value.DATABASE
				Else
					Me._DATABASE = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("tblDataSource")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblAttributes(ByVal entity As tblAttribute)
		Me.SendPropertyChanging
		entity.tblCube = Me
	End Sub
	
	Private Sub detach_tblAttributes(ByVal entity As tblAttribute)
		Me.SendPropertyChanging
		entity.tblCube = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCube_User")>  _
Partial Public Class tblCube_User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _USERNAME As String
	
	Private _CUBE_ID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUSERNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnUSERNAMEChanged()
    End Sub
    Partial Private Sub OnCUBE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCUBE_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USERNAME", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property USERNAME() As String
		Get
			Return Me._USERNAME
		End Get
		Set
			If (String.Equals(Me._USERNAME, value) = false) Then
				Me.OnUSERNAMEChanging(value)
				Me.SendPropertyChanging
				Me._USERNAME = value
				Me.SendPropertyChanged("USERNAME")
				Me.OnUSERNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CUBE_ID() As Integer
		Get
			Return Me._CUBE_ID
		End Get
		Set
			If ((Me._CUBE_ID = value)  _
						= false) Then
				Me.OnCUBE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CUBE_ID = value
				Me.SendPropertyChanged("CUBE_ID")
				Me.OnCUBE_IDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDashBoard_Assignment")>  _
Partial Public Class tblDashBoard_Assignment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _DB_ID As Integer
	
	Private _UserName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnDB_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDB_IDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DB_ID", DbType:="Int NOT NULL")>  _
	Public Property DB_ID() As Integer
		Get
			Return Me._DB_ID
		End Get
		Set
			If ((Me._DB_ID = value)  _
						= false) Then
				Me.OnDB_IDChanging(value)
				Me.SendPropertyChanging
				Me._DB_ID = value
				Me.SendPropertyChanged("DB_ID")
				Me.OnDB_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDataSource")>  _
Partial Public Class tblDataSource
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DATABASE As String
	
	Private _CONNECTING As String
	
	Private _tblCubes As EntitySet(Of tblCube)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDATABASEChanging(value As String)
    End Sub
    Partial Private Sub OnDATABASEChanged()
    End Sub
    Partial Private Sub OnCONNECTINGChanging(value As String)
    End Sub
    Partial Private Sub OnCONNECTINGChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblCubes = New EntitySet(Of tblCube)(AddressOf Me.attach_tblCubes, AddressOf Me.detach_tblCubes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[DATABASE]", Storage:="_DATABASE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property DATABASE() As String
		Get
			Return Me._DATABASE
		End Get
		Set
			If (String.Equals(Me._DATABASE, value) = false) Then
				Me.OnDATABASEChanging(value)
				Me.SendPropertyChanging
				Me._DATABASE = value
				Me.SendPropertyChanged("DATABASE")
				Me.OnDATABASEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONNECTING", DbType:="VarChar(255)")>  _
	Public Property CONNECTING() As String
		Get
			Return Me._CONNECTING
		End Get
		Set
			If (String.Equals(Me._CONNECTING, value) = false) Then
				Me.OnCONNECTINGChanging(value)
				Me.SendPropertyChanging
				Me._CONNECTING = value
				Me.SendPropertyChanged("CONNECTING")
				Me.OnCONNECTINGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblDataSource_tblCube", Storage:="_tblCubes", ThisKey:="DATABASE", OtherKey:="DATABASE")>  _
	Public Property tblCubes() As EntitySet(Of tblCube)
		Get
			Return Me._tblCubes
		End Get
		Set
			Me._tblCubes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblCubes(ByVal entity As tblCube)
		Me.SendPropertyChanging
		entity.tblDataSource = Me
	End Sub
	
	Private Sub detach_tblCubes(ByVal entity As tblCube)
		Me.SendPropertyChanging
		entity.tblDataSource = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_Attribute")>  _
Partial Public Class V_Attribute
	
	Private _CUBE_ID As Integer
	
	Private _DATABASE As String
	
	Private _CUBE As String
	
	Private _BASE_CUBE_NAME As String
	
	Private _ATTRIBUTE As String
	
	Private _FIELD As String
	
	Private _VISIBLE As String
	
	Private _FormatType As String
	
	Private _Type As String
	
	Private _FOLDER As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE_ID", DbType:="Int NOT NULL")>  _
	Public Property CUBE_ID() As Integer
		Get
			Return Me._CUBE_ID
		End Get
		Set
			If ((Me._CUBE_ID = value)  _
						= false) Then
				Me._CUBE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[DATABASE]", Storage:="_DATABASE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DATABASE() As String
		Get
			Return Me._DATABASE
		End Get
		Set
			If (String.Equals(Me._DATABASE, value) = false) Then
				Me._DATABASE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CUBE() As String
		Get
			Return Me._CUBE
		End Get
		Set
			If (String.Equals(Me._CUBE, value) = false) Then
				Me._CUBE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BASE_CUBE_NAME", DbType:="VarChar(50)")>  _
	Public Property BASE_CUBE_NAME() As String
		Get
			Return Me._BASE_CUBE_NAME
		End Get
		Set
			If (String.Equals(Me._BASE_CUBE_NAME, value) = false) Then
				Me._BASE_CUBE_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ATTRIBUTE", DbType:="VarChar(50)")>  _
	Public Property ATTRIBUTE() As String
		Get
			Return Me._ATTRIBUTE
		End Get
		Set
			If (String.Equals(Me._ATTRIBUTE, value) = false) Then
				Me._ATTRIBUTE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property FIELD() As String
		Get
			Return Me._FIELD
		End Get
		Set
			If (String.Equals(Me._FIELD, value) = false) Then
				Me._FIELD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VISIBLE", DbType:="VarChar(50)")>  _
	Public Property VISIBLE() As String
		Get
			Return Me._VISIBLE
		End Get
		Set
			If (String.Equals(Me._VISIBLE, value) = false) Then
				Me._VISIBLE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FormatType", DbType:="VarChar(50)")>  _
	Public Property FormatType() As String
		Get
			Return Me._FormatType
		End Get
		Set
			If (String.Equals(Me._FormatType, value) = false) Then
				Me._FormatType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="VarChar(50)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me._Type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOLDER", DbType:="VarChar(50)")>  _
	Public Property FOLDER() As String
		Get
			Return Me._FOLDER
		End Get
		Set
			If (String.Equals(Me._FOLDER, value) = false) Then
				Me._FOLDER = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_DMX_Measures")>  _
Partial Public Class V_DMX_Measure
	
	Private _CATALOG_NAME As String
	
	Private _CUBE_NAME As String
	
	Private _MEASUREGROUP_NAME As String
	
	Private _MEASURE_CAPTION As String
	
	Private _MEASURE_IS_VISIBLE As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CATALOG_NAME", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CATALOG_NAME() As String
		Get
			Return Me._CATALOG_NAME
		End Get
		Set
			If (String.Equals(Me._CATALOG_NAME, value) = false) Then
				Me._CATALOG_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE_NAME", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CUBE_NAME() As String
		Get
			Return Me._CUBE_NAME
		End Get
		Set
			If (String.Equals(Me._CUBE_NAME, value) = false) Then
				Me._CUBE_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MEASUREGROUP_NAME", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MEASUREGROUP_NAME() As String
		Get
			Return Me._MEASUREGROUP_NAME
		End Get
		Set
			If (String.Equals(Me._MEASUREGROUP_NAME, value) = false) Then
				Me._MEASUREGROUP_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MEASURE_CAPTION", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MEASURE_CAPTION() As String
		Get
			Return Me._MEASURE_CAPTION
		End Get
		Set
			If (String.Equals(Me._MEASURE_CAPTION, value) = false) Then
				Me._MEASURE_CAPTION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MEASURE_IS_VISIBLE", DbType:="Bit")>  _
	Public Property MEASURE_IS_VISIBLE() As System.Nullable(Of Boolean)
		Get
			Return Me._MEASURE_IS_VISIBLE
		End Get
		Set
			If (Me._MEASURE_IS_VISIBLE.Equals(value) = false) Then
				Me._MEASURE_IS_VISIBLE = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_BIAttribute")>  _
Partial Public Class V_BIAttribute
	
	Private _BID As Integer
	
	Private _GUID As String
	
	Private _FIELD As String
	
	Private _AREA As System.Nullable(Of Integer)
	
	Private _AREAINDEX As System.Nullable(Of Integer)
	
	Private _ORDERBY As System.Nullable(Of Integer)
	
	Private _CUBE_ID As Integer
	
	Private _DATABASE As String
	
	Private _CUBE As String
	
	Private _BASE_CUBE_NAME As String
	
	Private _ATTRIBUTE As String
	
	Private _FormatType As String
	
	Private _Type As String
	
	Private _FOLDER As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BID", DbType:="Int NOT NULL")>  _
	Public Property BID() As Integer
		Get
			Return Me._BID
		End Get
		Set
			If ((Me._BID = value)  _
						= false) Then
				Me._BID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="VarChar(255)")>  _
	Public Property GUID() As String
		Get
			Return Me._GUID
		End Get
		Set
			If (String.Equals(Me._GUID, value) = false) Then
				Me._GUID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property FIELD() As String
		Get
			Return Me._FIELD
		End Get
		Set
			If (String.Equals(Me._FIELD, value) = false) Then
				Me._FIELD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREA", DbType:="Int")>  _
	Public Property AREA() As System.Nullable(Of Integer)
		Get
			Return Me._AREA
		End Get
		Set
			If (Me._AREA.Equals(value) = false) Then
				Me._AREA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREAINDEX", DbType:="Int")>  _
	Public Property AREAINDEX() As System.Nullable(Of Integer)
		Get
			Return Me._AREAINDEX
		End Get
		Set
			If (Me._AREAINDEX.Equals(value) = false) Then
				Me._AREAINDEX = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDERBY", DbType:="Int")>  _
	Public Property ORDERBY() As System.Nullable(Of Integer)
		Get
			Return Me._ORDERBY
		End Get
		Set
			If (Me._ORDERBY.Equals(value) = false) Then
				Me._ORDERBY = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE_ID", DbType:="Int NOT NULL")>  _
	Public Property CUBE_ID() As Integer
		Get
			Return Me._CUBE_ID
		End Get
		Set
			If ((Me._CUBE_ID = value)  _
						= false) Then
				Me._CUBE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[DATABASE]", Storage:="_DATABASE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DATABASE() As String
		Get
			Return Me._DATABASE
		End Get
		Set
			If (String.Equals(Me._DATABASE, value) = false) Then
				Me._DATABASE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CUBE() As String
		Get
			Return Me._CUBE
		End Get
		Set
			If (String.Equals(Me._CUBE, value) = false) Then
				Me._CUBE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BASE_CUBE_NAME", DbType:="VarChar(50)")>  _
	Public Property BASE_CUBE_NAME() As String
		Get
			Return Me._BASE_CUBE_NAME
		End Get
		Set
			If (String.Equals(Me._BASE_CUBE_NAME, value) = false) Then
				Me._BASE_CUBE_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ATTRIBUTE", DbType:="VarChar(50)")>  _
	Public Property ATTRIBUTE() As String
		Get
			Return Me._ATTRIBUTE
		End Get
		Set
			If (String.Equals(Me._ATTRIBUTE, value) = false) Then
				Me._ATTRIBUTE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FormatType", DbType:="VarChar(50)")>  _
	Public Property FormatType() As String
		Get
			Return Me._FormatType
		End Get
		Set
			If (String.Equals(Me._FormatType, value) = false) Then
				Me._FormatType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me._Type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOLDER", DbType:="VarChar(50)")>  _
	Public Property FOLDER() As String
		Get
			Return Me._FOLDER
		End Get
		Set
			If (String.Equals(Me._FOLDER, value) = false) Then
				Me._FOLDER = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_BIAttribute_User")>  _
Partial Public Class V_BIAttribute_User
	
	Private _BUID As Integer
	
	Private _FIELD As String
	
	Private _AREA As System.Nullable(Of Integer)
	
	Private _AREAINDEX As System.Nullable(Of Integer)
	
	Private _ORDERBY As System.Nullable(Of Integer)
	
	Private _USERNAME As String
	
	Private _CUBE_ID As Integer
	
	Private _DATABASE As String
	
	Private _CUBE As String
	
	Private _BASE_CUBE_NAME As String
	
	Private _ATTRIBUTE As String
	
	Private _FormatType As String
	
	Private _Type As String
	
	Private _FOLDER As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BUID", DbType:="Int NOT NULL")>  _
	Public Property BUID() As Integer
		Get
			Return Me._BUID
		End Get
		Set
			If ((Me._BUID = value)  _
						= false) Then
				Me._BUID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property FIELD() As String
		Get
			Return Me._FIELD
		End Get
		Set
			If (String.Equals(Me._FIELD, value) = false) Then
				Me._FIELD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREA", DbType:="Int")>  _
	Public Property AREA() As System.Nullable(Of Integer)
		Get
			Return Me._AREA
		End Get
		Set
			If (Me._AREA.Equals(value) = false) Then
				Me._AREA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREAINDEX", DbType:="Int")>  _
	Public Property AREAINDEX() As System.Nullable(Of Integer)
		Get
			Return Me._AREAINDEX
		End Get
		Set
			If (Me._AREAINDEX.Equals(value) = false) Then
				Me._AREAINDEX = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDERBY", DbType:="Int")>  _
	Public Property ORDERBY() As System.Nullable(Of Integer)
		Get
			Return Me._ORDERBY
		End Get
		Set
			If (Me._ORDERBY.Equals(value) = false) Then
				Me._ORDERBY = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USERNAME", DbType:="VarChar(50)")>  _
	Public Property USERNAME() As String
		Get
			Return Me._USERNAME
		End Get
		Set
			If (String.Equals(Me._USERNAME, value) = false) Then
				Me._USERNAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE_ID", DbType:="Int NOT NULL")>  _
	Public Property CUBE_ID() As Integer
		Get
			Return Me._CUBE_ID
		End Get
		Set
			If ((Me._CUBE_ID = value)  _
						= false) Then
				Me._CUBE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[DATABASE]", Storage:="_DATABASE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DATABASE() As String
		Get
			Return Me._DATABASE
		End Get
		Set
			If (String.Equals(Me._DATABASE, value) = false) Then
				Me._DATABASE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CUBE() As String
		Get
			Return Me._CUBE
		End Get
		Set
			If (String.Equals(Me._CUBE, value) = false) Then
				Me._CUBE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BASE_CUBE_NAME", DbType:="VarChar(50)")>  _
	Public Property BASE_CUBE_NAME() As String
		Get
			Return Me._BASE_CUBE_NAME
		End Get
		Set
			If (String.Equals(Me._BASE_CUBE_NAME, value) = false) Then
				Me._BASE_CUBE_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ATTRIBUTE", DbType:="VarChar(50)")>  _
	Public Property ATTRIBUTE() As String
		Get
			Return Me._ATTRIBUTE
		End Get
		Set
			If (String.Equals(Me._ATTRIBUTE, value) = false) Then
				Me._ATTRIBUTE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FormatType", DbType:="VarChar(50)")>  _
	Public Property FormatType() As String
		Get
			Return Me._FormatType
		End Get
		Set
			If (String.Equals(Me._FormatType, value) = false) Then
				Me._FormatType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="VarChar(9) NOT NULL", CanBeNull:=false)>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me._Type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOLDER", DbType:="VarChar(50)")>  _
	Public Property FOLDER() As String
		Get
			Return Me._FOLDER
		End Get
		Set
			If (String.Equals(Me._FOLDER, value) = false) Then
				Me._FOLDER = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_Cube")>  _
Partial Public Class V_Cube
	
	Private _CUBE_ID As Integer
	
	Private _DATABASE As String
	
	Private _CUBE As String
	
	Private _BASE_CUBE_NAME As String
	
	Private _CONNECTING As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE_ID", DbType:="Int NOT NULL")>  _
	Public Property CUBE_ID() As Integer
		Get
			Return Me._CUBE_ID
		End Get
		Set
			If ((Me._CUBE_ID = value)  _
						= false) Then
				Me._CUBE_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[DATABASE]", Storage:="_DATABASE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DATABASE() As String
		Get
			Return Me._DATABASE
		End Get
		Set
			If (String.Equals(Me._DATABASE, value) = false) Then
				Me._DATABASE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CUBE() As String
		Get
			Return Me._CUBE
		End Get
		Set
			If (String.Equals(Me._CUBE, value) = false) Then
				Me._CUBE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BASE_CUBE_NAME", DbType:="VarChar(50)")>  _
	Public Property BASE_CUBE_NAME() As String
		Get
			Return Me._BASE_CUBE_NAME
		End Get
		Set
			If (String.Equals(Me._BASE_CUBE_NAME, value) = false) Then
				Me._BASE_CUBE_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONNECTING", DbType:="VarChar(255)")>  _
	Public Property CONNECTING() As String
		Get
			Return Me._CONNECTING
		End Get
		Set
			If (String.Equals(Me._CONNECTING, value) = false) Then
				Me._CONNECTING = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_DMX_Attributes")>  _
Partial Public Class V_DMX_Attribute
	
	Private _CATALOG_NAME As String
	
	Private _CUBE_NAME As String
	
	Private _HIERARCHY_DISPLAY_FOLDER As String
	
	Private _DIMENSION_UNIQUE_NAME As String
	
	Private _HIERARCHY_CAPTION As String
	
	Private _HIERARCHY_IS_VISIBLE As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CATALOG_NAME", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CATALOG_NAME() As String
		Get
			Return Me._CATALOG_NAME
		End Get
		Set
			If (String.Equals(Me._CATALOG_NAME, value) = false) Then
				Me._CATALOG_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE_NAME", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CUBE_NAME() As String
		Get
			Return Me._CUBE_NAME
		End Get
		Set
			If (String.Equals(Me._CUBE_NAME, value) = false) Then
				Me._CUBE_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HIERARCHY_DISPLAY_FOLDER", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HIERARCHY_DISPLAY_FOLDER() As String
		Get
			Return Me._HIERARCHY_DISPLAY_FOLDER
		End Get
		Set
			If (String.Equals(Me._HIERARCHY_DISPLAY_FOLDER, value) = false) Then
				Me._HIERARCHY_DISPLAY_FOLDER = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIMENSION_UNIQUE_NAME", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DIMENSION_UNIQUE_NAME() As String
		Get
			Return Me._DIMENSION_UNIQUE_NAME
		End Get
		Set
			If (String.Equals(Me._DIMENSION_UNIQUE_NAME, value) = false) Then
				Me._DIMENSION_UNIQUE_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HIERARCHY_CAPTION", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HIERARCHY_CAPTION() As String
		Get
			Return Me._HIERARCHY_CAPTION
		End Get
		Set
			If (String.Equals(Me._HIERARCHY_CAPTION, value) = false) Then
				Me._HIERARCHY_CAPTION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HIERARCHY_IS_VISIBLE", DbType:="Bit")>  _
	Public Property HIERARCHY_IS_VISIBLE() As System.Nullable(Of Boolean)
		Get
			Return Me._HIERARCHY_IS_VISIBLE
		End Get
		Set
			If (Me._HIERARCHY_IS_VISIBLE.Equals(value) = false) Then
				Me._HIERARCHY_IS_VISIBLE = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_DMX_Cubes")>  _
Partial Public Class V_DMX_Cube
	
	Private _CATALOG_NAME As String
	
	Private _CUBE_CAPTION As String
	
	Private _BASE_CUBE_NAME As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CATALOG_NAME", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CATALOG_NAME() As String
		Get
			Return Me._CATALOG_NAME
		End Get
		Set
			If (String.Equals(Me._CATALOG_NAME, value) = false) Then
				Me._CATALOG_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE_CAPTION", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CUBE_CAPTION() As String
		Get
			Return Me._CUBE_CAPTION
		End Get
		Set
			If (String.Equals(Me._CUBE_CAPTION, value) = false) Then
				Me._CUBE_CAPTION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BASE_CUBE_NAME", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property BASE_CUBE_NAME() As String
		Get
			Return Me._BASE_CUBE_NAME
		End Get
		Set
			If (String.Equals(Me._BASE_CUBE_NAME, value) = false) Then
				Me._BASE_CUBE_NAME = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_DMX_Dimensions")>  _
Partial Public Class V_DMX_Dimension
	
	Private _CATALOG_NAME As String
	
	Private _DIMENSION_CAPTION As String
	
	Private _CUBE_NAME As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CATALOG_NAME", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CATALOG_NAME() As String
		Get
			Return Me._CATALOG_NAME
		End Get
		Set
			If (String.Equals(Me._CATALOG_NAME, value) = false) Then
				Me._CATALOG_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIMENSION_CAPTION", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DIMENSION_CAPTION() As String
		Get
			Return Me._DIMENSION_CAPTION
		End Get
		Set
			If (String.Equals(Me._DIMENSION_CAPTION, value) = false) Then
				Me._DIMENSION_CAPTION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE_NAME", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CUBE_NAME() As String
		Get
			Return Me._CUBE_NAME
		End Get
		Set
			If (String.Equals(Me._CUBE_NAME, value) = false) Then
				Me._CUBE_NAME = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_DMX_Hierarchies")>  _
Partial Public Class V_DMX_Hierarchy
	
	Private _CATALOG_NAME As String
	
	Private _CUBE_NAME As String
	
	Private _HIERARCHY_DISPLAY_FOLDER As String
	
	Private _DIMENSION_UNIQUE_NAME As String
	
	Private _HIERARCHY_CAPTION As String
	
	Private _HIERARCHY_IS_VISIBLE As System.Nullable(Of Boolean)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CATALOG_NAME", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CATALOG_NAME() As String
		Get
			Return Me._CATALOG_NAME
		End Get
		Set
			If (String.Equals(Me._CATALOG_NAME, value) = false) Then
				Me._CATALOG_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE_NAME", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CUBE_NAME() As String
		Get
			Return Me._CUBE_NAME
		End Get
		Set
			If (String.Equals(Me._CUBE_NAME, value) = false) Then
				Me._CUBE_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HIERARCHY_DISPLAY_FOLDER", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HIERARCHY_DISPLAY_FOLDER() As String
		Get
			Return Me._HIERARCHY_DISPLAY_FOLDER
		End Get
		Set
			If (String.Equals(Me._HIERARCHY_DISPLAY_FOLDER, value) = false) Then
				Me._HIERARCHY_DISPLAY_FOLDER = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DIMENSION_UNIQUE_NAME", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DIMENSION_UNIQUE_NAME() As String
		Get
			Return Me._DIMENSION_UNIQUE_NAME
		End Get
		Set
			If (String.Equals(Me._DIMENSION_UNIQUE_NAME, value) = false) Then
				Me._DIMENSION_UNIQUE_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HIERARCHY_CAPTION", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property HIERARCHY_CAPTION() As String
		Get
			Return Me._HIERARCHY_CAPTION
		End Get
		Set
			If (String.Equals(Me._HIERARCHY_CAPTION, value) = false) Then
				Me._HIERARCHY_CAPTION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HIERARCHY_IS_VISIBLE", DbType:="Bit")>  _
	Public Property HIERARCHY_IS_VISIBLE() As System.Nullable(Of Boolean)
		Get
			Return Me._HIERARCHY_IS_VISIBLE
		End Get
		Set
			If (Me._HIERARCHY_IS_VISIBLE.Equals(value) = false) Then
				Me._HIERARCHY_IS_VISIBLE = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDataSourceBI_Field_Filter")>  _
Partial Public Class tblDataSourceBI_Field_Filter
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FILTER_ID As Integer
	
	Private _FILTER_VALUE As String
	
	Private _FILTER_TYPE As String
	
	Private _FIELD_NAME As String
	
	Private _BID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFILTER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFILTER_IDChanged()
    End Sub
    Partial Private Sub OnFILTER_VALUEChanging(value As String)
    End Sub
    Partial Private Sub OnFILTER_VALUEChanged()
    End Sub
    Partial Private Sub OnFILTER_TYPEChanging(value As String)
    End Sub
    Partial Private Sub OnFILTER_TYPEChanged()
    End Sub
    Partial Private Sub OnFIELD_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFIELD_NAMEChanged()
    End Sub
    Partial Private Sub OnBIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILTER_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property FILTER_ID() As Integer
		Get
			Return Me._FILTER_ID
		End Get
		Set
			If ((Me._FILTER_ID = value)  _
						= false) Then
				Me.OnFILTER_IDChanging(value)
				Me.SendPropertyChanging
				Me._FILTER_ID = value
				Me.SendPropertyChanged("FILTER_ID")
				Me.OnFILTER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILTER_VALUE", DbType:="VarChar(255)")>  _
	Public Property FILTER_VALUE() As String
		Get
			Return Me._FILTER_VALUE
		End Get
		Set
			If (String.Equals(Me._FILTER_VALUE, value) = false) Then
				Me.OnFILTER_VALUEChanging(value)
				Me.SendPropertyChanging
				Me._FILTER_VALUE = value
				Me.SendPropertyChanged("FILTER_VALUE")
				Me.OnFILTER_VALUEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILTER_TYPE", DbType:="VarChar(50)")>  _
	Public Property FILTER_TYPE() As String
		Get
			Return Me._FILTER_TYPE
		End Get
		Set
			If (String.Equals(Me._FILTER_TYPE, value) = false) Then
				Me.OnFILTER_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._FILTER_TYPE = value
				Me.SendPropertyChanged("FILTER_TYPE")
				Me.OnFILTER_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD_NAME", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FIELD_NAME() As String
		Get
			Return Me._FIELD_NAME
		End Get
		Set
			If (String.Equals(Me._FIELD_NAME, value) = false) Then
				Me.OnFIELD_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._FIELD_NAME = value
				Me.SendPropertyChanged("FIELD_NAME")
				Me.OnFIELD_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BID", DbType:="Int NOT NULL")>  _
	Public Property BID() As Integer
		Get
			Return Me._BID
		End Get
		Set
			If ((Me._BID = value)  _
						= false) Then
				Me.OnBIDChanging(value)
				Me.SendPropertyChanging
				Me._BID = value
				Me.SendPropertyChanged("BID")
				Me.OnBIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDataSourceBI_Assignment")>  _
Partial Public Class tblDataSourceBI_Assignment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _BID As Integer
	
	Private _USERNAME As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnBIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBIDChanged()
    End Sub
    Partial Private Sub OnUSERNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnUSERNAMEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BID", DbType:="Int NOT NULL")>  _
	Public Property BID() As Integer
		Get
			Return Me._BID
		End Get
		Set
			If ((Me._BID = value)  _
						= false) Then
				Me.OnBIDChanging(value)
				Me.SendPropertyChanging
				Me._BID = value
				Me.SendPropertyChanged("BID")
				Me.OnBIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USERNAME", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property USERNAME() As String
		Get
			Return Me._USERNAME
		End Get
		Set
			If (String.Equals(Me._USERNAME, value) = false) Then
				Me.OnUSERNAMEChanging(value)
				Me.SendPropertyChanging
				Me._USERNAME = value
				Me.SendPropertyChanged("USERNAME")
				Me.OnUSERNAMEChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDataSourceBI_Field")>  _
Partial Public Class tblDataSourceBI_Field
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FIELD As String
	
	Private _BID As Integer
	
	Private _AREA As System.Nullable(Of Integer)
	
	Private _ORDERBY As System.Nullable(Of Integer)
	
	Private _FIELDTYPE As String
	
	Private _AREAINDEX As System.Nullable(Of Integer)
	
	Private _SortBySummaryInfo As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFIELDChanging(value As String)
    End Sub
    Partial Private Sub OnFIELDChanged()
    End Sub
    Partial Private Sub OnBIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBIDChanged()
    End Sub
    Partial Private Sub OnAREAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAREAChanged()
    End Sub
    Partial Private Sub OnORDERBYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDERBYChanged()
    End Sub
    Partial Private Sub OnFIELDTYPEChanging(value As String)
    End Sub
    Partial Private Sub OnFIELDTYPEChanged()
    End Sub
    Partial Private Sub OnAREAINDEXChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAREAINDEXChanged()
    End Sub
    Partial Private Sub OnSortBySummaryInfoChanging(value As String)
    End Sub
    Partial Private Sub OnSortBySummaryInfoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD", DbType:="VarChar(150) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FIELD() As String
		Get
			Return Me._FIELD
		End Get
		Set
			If (String.Equals(Me._FIELD, value) = false) Then
				Me.OnFIELDChanging(value)
				Me.SendPropertyChanging
				Me._FIELD = value
				Me.SendPropertyChanged("FIELD")
				Me.OnFIELDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property BID() As Integer
		Get
			Return Me._BID
		End Get
		Set
			If ((Me._BID = value)  _
						= false) Then
				Me.OnBIDChanging(value)
				Me.SendPropertyChanging
				Me._BID = value
				Me.SendPropertyChanged("BID")
				Me.OnBIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREA", DbType:="Int")>  _
	Public Property AREA() As System.Nullable(Of Integer)
		Get
			Return Me._AREA
		End Get
		Set
			If (Me._AREA.Equals(value) = false) Then
				Me.OnAREAChanging(value)
				Me.SendPropertyChanging
				Me._AREA = value
				Me.SendPropertyChanged("AREA")
				Me.OnAREAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDERBY", DbType:="Int")>  _
	Public Property ORDERBY() As System.Nullable(Of Integer)
		Get
			Return Me._ORDERBY
		End Get
		Set
			If (Me._ORDERBY.Equals(value) = false) Then
				Me.OnORDERBYChanging(value)
				Me.SendPropertyChanging
				Me._ORDERBY = value
				Me.SendPropertyChanged("ORDERBY")
				Me.OnORDERBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELDTYPE", DbType:="VarChar(50)")>  _
	Public Property FIELDTYPE() As String
		Get
			Return Me._FIELDTYPE
		End Get
		Set
			If (String.Equals(Me._FIELDTYPE, value) = false) Then
				Me.OnFIELDTYPEChanging(value)
				Me.SendPropertyChanging
				Me._FIELDTYPE = value
				Me.SendPropertyChanged("FIELDTYPE")
				Me.OnFIELDTYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREAINDEX", DbType:="Int")>  _
	Public Property AREAINDEX() As System.Nullable(Of Integer)
		Get
			Return Me._AREAINDEX
		End Get
		Set
			If (Me._AREAINDEX.Equals(value) = false) Then
				Me.OnAREAINDEXChanging(value)
				Me.SendPropertyChanging
				Me._AREAINDEX = value
				Me.SendPropertyChanged("AREAINDEX")
				Me.OnAREAINDEXChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortBySummaryInfo", DbType:="NVarChar(100)")>  _
	Public Property SortBySummaryInfo() As String
		Get
			Return Me._SortBySummaryInfo
		End Get
		Set
			If (String.Equals(Me._SortBySummaryInfo, value) = false) Then
				Me.OnSortBySummaryInfoChanging(value)
				Me.SendPropertyChanging
				Me._SortBySummaryInfo = value
				Me.SendPropertyChanged("SortBySummaryInfo")
				Me.OnSortBySummaryInfoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDataSourceFile_Field")>  _
Partial Public Class tblDataSourceFile_Field
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FIELD_ID As Integer
	
	Private _DS_ID As Integer
	
	Private _FIELD_CAPTION As String
	
	Private _FIELD_NAME As String
	
	Private _SummaryType As System.Nullable(Of Integer)
	
	Private _CellFormat_FormatType As System.Nullable(Of Integer)
	
	Private _CellFormat_FormatString As String
	
	Private _GroupInterval As System.Nullable(Of Integer)
	
	Private _UnboundExpressionMode As System.Nullable(Of Integer)
	
	Private _UnboundExpression As String
	
	Private _UnboundColumnType As System.Nullable(Of Integer)
	
	Private _PivotSummaryDisplayType As System.Nullable(Of Integer)
	
	Private _AREA As System.Nullable(Of Integer)
	
	Private _ORDERBY As System.Nullable(Of Integer)
	
	Private _AREAINDEX As System.Nullable(Of Integer)
	
	Private _Dimension As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFIELD_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFIELD_IDChanged()
    End Sub
    Partial Private Sub OnDS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDS_IDChanged()
    End Sub
    Partial Private Sub OnFIELD_CAPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnFIELD_CAPTIONChanged()
    End Sub
    Partial Private Sub OnFIELD_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFIELD_NAMEChanged()
    End Sub
    Partial Private Sub OnSummaryTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSummaryTypeChanged()
    End Sub
    Partial Private Sub OnCellFormat_FormatTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCellFormat_FormatTypeChanged()
    End Sub
    Partial Private Sub OnCellFormat_FormatStringChanging(value As String)
    End Sub
    Partial Private Sub OnCellFormat_FormatStringChanged()
    End Sub
    Partial Private Sub OnGroupIntervalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGroupIntervalChanged()
    End Sub
    Partial Private Sub OnUnboundExpressionModeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUnboundExpressionModeChanged()
    End Sub
    Partial Private Sub OnUnboundExpressionChanging(value As String)
    End Sub
    Partial Private Sub OnUnboundExpressionChanged()
    End Sub
    Partial Private Sub OnUnboundColumnTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUnboundColumnTypeChanged()
    End Sub
    Partial Private Sub OnPivotSummaryDisplayTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPivotSummaryDisplayTypeChanged()
    End Sub
    Partial Private Sub OnAREAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAREAChanged()
    End Sub
    Partial Private Sub OnORDERBYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDERBYChanged()
    End Sub
    Partial Private Sub OnAREAINDEXChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAREAINDEXChanged()
    End Sub
    Partial Private Sub OnDimensionChanging(value As String)
    End Sub
    Partial Private Sub OnDimensionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property FIELD_ID() As Integer
		Get
			Return Me._FIELD_ID
		End Get
		Set
			If ((Me._FIELD_ID = value)  _
						= false) Then
				Me.OnFIELD_IDChanging(value)
				Me.SendPropertyChanging
				Me._FIELD_ID = value
				Me.SendPropertyChanged("FIELD_ID")
				Me.OnFIELD_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DS_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DS_ID() As Integer
		Get
			Return Me._DS_ID
		End Get
		Set
			If ((Me._DS_ID = value)  _
						= false) Then
				Me.OnDS_IDChanging(value)
				Me.SendPropertyChanging
				Me._DS_ID = value
				Me.SendPropertyChanged("DS_ID")
				Me.OnDS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD_CAPTION", DbType:="VarChar(50)")>  _
	Public Property FIELD_CAPTION() As String
		Get
			Return Me._FIELD_CAPTION
		End Get
		Set
			If (String.Equals(Me._FIELD_CAPTION, value) = false) Then
				Me.OnFIELD_CAPTIONChanging(value)
				Me.SendPropertyChanging
				Me._FIELD_CAPTION = value
				Me.SendPropertyChanged("FIELD_CAPTION")
				Me.OnFIELD_CAPTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD_NAME", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FIELD_NAME() As String
		Get
			Return Me._FIELD_NAME
		End Get
		Set
			If (String.Equals(Me._FIELD_NAME, value) = false) Then
				Me.OnFIELD_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._FIELD_NAME = value
				Me.SendPropertyChanged("FIELD_NAME")
				Me.OnFIELD_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SummaryType", DbType:="Int")>  _
	Public Property SummaryType() As System.Nullable(Of Integer)
		Get
			Return Me._SummaryType
		End Get
		Set
			If (Me._SummaryType.Equals(value) = false) Then
				Me.OnSummaryTypeChanging(value)
				Me.SendPropertyChanging
				Me._SummaryType = value
				Me.SendPropertyChanged("SummaryType")
				Me.OnSummaryTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CellFormat_FormatType", DbType:="Int")>  _
	Public Property CellFormat_FormatType() As System.Nullable(Of Integer)
		Get
			Return Me._CellFormat_FormatType
		End Get
		Set
			If (Me._CellFormat_FormatType.Equals(value) = false) Then
				Me.OnCellFormat_FormatTypeChanging(value)
				Me.SendPropertyChanging
				Me._CellFormat_FormatType = value
				Me.SendPropertyChanged("CellFormat_FormatType")
				Me.OnCellFormat_FormatTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CellFormat_FormatString", DbType:="VarChar(100)")>  _
	Public Property CellFormat_FormatString() As String
		Get
			Return Me._CellFormat_FormatString
		End Get
		Set
			If (String.Equals(Me._CellFormat_FormatString, value) = false) Then
				Me.OnCellFormat_FormatStringChanging(value)
				Me.SendPropertyChanging
				Me._CellFormat_FormatString = value
				Me.SendPropertyChanged("CellFormat_FormatString")
				Me.OnCellFormat_FormatStringChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupInterval", DbType:="Int")>  _
	Public Property GroupInterval() As System.Nullable(Of Integer)
		Get
			Return Me._GroupInterval
		End Get
		Set
			If (Me._GroupInterval.Equals(value) = false) Then
				Me.OnGroupIntervalChanging(value)
				Me.SendPropertyChanging
				Me._GroupInterval = value
				Me.SendPropertyChanged("GroupInterval")
				Me.OnGroupIntervalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnboundExpressionMode", DbType:="Int")>  _
	Public Property UnboundExpressionMode() As System.Nullable(Of Integer)
		Get
			Return Me._UnboundExpressionMode
		End Get
		Set
			If (Me._UnboundExpressionMode.Equals(value) = false) Then
				Me.OnUnboundExpressionModeChanging(value)
				Me.SendPropertyChanging
				Me._UnboundExpressionMode = value
				Me.SendPropertyChanged("UnboundExpressionMode")
				Me.OnUnboundExpressionModeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnboundExpression", DbType:="VarChar(255)")>  _
	Public Property UnboundExpression() As String
		Get
			Return Me._UnboundExpression
		End Get
		Set
			If (String.Equals(Me._UnboundExpression, value) = false) Then
				Me.OnUnboundExpressionChanging(value)
				Me.SendPropertyChanging
				Me._UnboundExpression = value
				Me.SendPropertyChanged("UnboundExpression")
				Me.OnUnboundExpressionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnboundColumnType", DbType:="Int")>  _
	Public Property UnboundColumnType() As System.Nullable(Of Integer)
		Get
			Return Me._UnboundColumnType
		End Get
		Set
			If (Me._UnboundColumnType.Equals(value) = false) Then
				Me.OnUnboundColumnTypeChanging(value)
				Me.SendPropertyChanging
				Me._UnboundColumnType = value
				Me.SendPropertyChanged("UnboundColumnType")
				Me.OnUnboundColumnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PivotSummaryDisplayType", DbType:="Int")>  _
	Public Property PivotSummaryDisplayType() As System.Nullable(Of Integer)
		Get
			Return Me._PivotSummaryDisplayType
		End Get
		Set
			If (Me._PivotSummaryDisplayType.Equals(value) = false) Then
				Me.OnPivotSummaryDisplayTypeChanging(value)
				Me.SendPropertyChanging
				Me._PivotSummaryDisplayType = value
				Me.SendPropertyChanged("PivotSummaryDisplayType")
				Me.OnPivotSummaryDisplayTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREA", DbType:="Int")>  _
	Public Property AREA() As System.Nullable(Of Integer)
		Get
			Return Me._AREA
		End Get
		Set
			If (Me._AREA.Equals(value) = false) Then
				Me.OnAREAChanging(value)
				Me.SendPropertyChanging
				Me._AREA = value
				Me.SendPropertyChanged("AREA")
				Me.OnAREAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDERBY", DbType:="Int")>  _
	Public Property ORDERBY() As System.Nullable(Of Integer)
		Get
			Return Me._ORDERBY
		End Get
		Set
			If (Me._ORDERBY.Equals(value) = false) Then
				Me.OnORDERBYChanging(value)
				Me.SendPropertyChanging
				Me._ORDERBY = value
				Me.SendPropertyChanged("ORDERBY")
				Me.OnORDERBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREAINDEX", DbType:="Int")>  _
	Public Property AREAINDEX() As System.Nullable(Of Integer)
		Get
			Return Me._AREAINDEX
		End Get
		Set
			If (Me._AREAINDEX.Equals(value) = false) Then
				Me.OnAREAINDEXChanging(value)
				Me.SendPropertyChanging
				Me._AREAINDEX = value
				Me.SendPropertyChanged("AREAINDEX")
				Me.OnAREAINDEXChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dimension", DbType:="VarChar(2)")>  _
	Public Property Dimension() As String
		Get
			Return Me._Dimension
		End Get
		Set
			If (String.Equals(Me._Dimension, value) = false) Then
				Me.OnDimensionChanging(value)
				Me.SendPropertyChanging
				Me._Dimension = value
				Me.SendPropertyChanged("Dimension")
				Me.OnDimensionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBI_User")>  _
Partial Public Class tblBI_User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BUID As Integer
	
	Private _No As System.Nullable(Of Integer)
	
	Private _TITLE As String
	
	Private _DESCRIPTION As String
	
	Private _DEPARTMENT As String
	
	Private _ParentID As System.Nullable(Of Integer)
	
	Private _ACTIVE As String
	
	Private _CREATEDATE As System.Nullable(Of Date)
	
	Private _CREATEBY As String
	
	Private _MODIFYDATE As System.Nullable(Of Date)
	
	Private _MODIFYBY As String
	
	Private _USERNAME As String
	
	Private _CUBE_ID As System.Nullable(Of Integer)
	
	Private _ShowColumnGrandTotals As System.Nullable(Of Boolean)
	
	Private _ShowColumnTotals As System.Nullable(Of Boolean)
	
	Private _ShowRowGrandTotals As System.Nullable(Of Boolean)
	
	Private _ShowRowTotals As System.Nullable(Of Boolean)
	
	Private _ShowGrandTotalsForSingleValues As System.Nullable(Of Boolean)
	
	Private _ShowTotalsForSingleValues As System.Nullable(Of Boolean)
	
	Private _tblBIAttribute_Users As EntitySet(Of tblBIAttribute_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBUIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBUIDChanged()
    End Sub
    Partial Private Sub OnNoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNoChanged()
    End Sub
    Partial Private Sub OnTITLEChanging(value As String)
    End Sub
    Partial Private Sub OnTITLEChanged()
    End Sub
    Partial Private Sub OnDESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTIONChanged()
    End Sub
    Partial Private Sub OnDEPARTMENTChanging(value As String)
    End Sub
    Partial Private Sub OnDEPARTMENTChanged()
    End Sub
    Partial Private Sub OnParentIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentIDChanged()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As String)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnCREATEDATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCREATEDATEChanged()
    End Sub
    Partial Private Sub OnCREATEBYChanging(value As String)
    End Sub
    Partial Private Sub OnCREATEBYChanged()
    End Sub
    Partial Private Sub OnMODIFYDATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnMODIFYDATEChanged()
    End Sub
    Partial Private Sub OnMODIFYBYChanging(value As String)
    End Sub
    Partial Private Sub OnMODIFYBYChanged()
    End Sub
    Partial Private Sub OnUSERNAMEChanging(value As String)
    End Sub
    Partial Private Sub OnUSERNAMEChanged()
    End Sub
    Partial Private Sub OnCUBE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCUBE_IDChanged()
    End Sub
    Partial Private Sub OnShowColumnGrandTotalsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowColumnGrandTotalsChanged()
    End Sub
    Partial Private Sub OnShowColumnTotalsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowColumnTotalsChanged()
    End Sub
    Partial Private Sub OnShowRowGrandTotalsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowRowGrandTotalsChanged()
    End Sub
    Partial Private Sub OnShowRowTotalsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowRowTotalsChanged()
    End Sub
    Partial Private Sub OnShowGrandTotalsForSingleValuesChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowGrandTotalsForSingleValuesChanged()
    End Sub
    Partial Private Sub OnShowTotalsForSingleValuesChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowTotalsForSingleValuesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblBIAttribute_Users = New EntitySet(Of tblBIAttribute_User)(AddressOf Me.attach_tblBIAttribute_Users, AddressOf Me.detach_tblBIAttribute_Users)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BUID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BUID() As Integer
		Get
			Return Me._BUID
		End Get
		Set
			If ((Me._BUID = value)  _
						= false) Then
				Me.OnBUIDChanging(value)
				Me.SendPropertyChanging
				Me._BUID = value
				Me.SendPropertyChanged("BUID")
				Me.OnBUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No", DbType:="Int")>  _
	Public Property No() As System.Nullable(Of Integer)
		Get
			Return Me._No
		End Get
		Set
			If (Me._No.Equals(value) = false) Then
				Me.OnNoChanging(value)
				Me.SendPropertyChanging
				Me._No = value
				Me.SendPropertyChanged("No")
				Me.OnNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TITLE", DbType:="VarChar(255)")>  _
	Public Property TITLE() As String
		Get
			Return Me._TITLE
		End Get
		Set
			If (String.Equals(Me._TITLE, value) = false) Then
				Me.OnTITLEChanging(value)
				Me.SendPropertyChanging
				Me._TITLE = value
				Me.SendPropertyChanged("TITLE")
				Me.OnTITLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPTION", DbType:="VarChar(255)")>  _
	Public Property DESCRIPTION() As String
		Get
			Return Me._DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._DESCRIPTION, value) = false) Then
				Me.OnDESCRIPTIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPTION = value
				Me.SendPropertyChanged("DESCRIPTION")
				Me.OnDESCRIPTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEPARTMENT", DbType:="VarChar(50)")>  _
	Public Property DEPARTMENT() As String
		Get
			Return Me._DEPARTMENT
		End Get
		Set
			If (String.Equals(Me._DEPARTMENT, value) = false) Then
				Me.OnDEPARTMENTChanging(value)
				Me.SendPropertyChanging
				Me._DEPARTMENT = value
				Me.SendPropertyChanged("DEPARTMENT")
				Me.OnDEPARTMENTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentID", DbType:="Int")>  _
	Public Property ParentID() As System.Nullable(Of Integer)
		Get
			Return Me._ParentID
		End Get
		Set
			If (Me._ParentID.Equals(value) = false) Then
				Me.OnParentIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentID = value
				Me.SendPropertyChanged("ParentID")
				Me.OnParentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="VarChar(50)")>  _
	Public Property ACTIVE() As String
		Get
			Return Me._ACTIVE
		End Get
		Set
			If (String.Equals(Me._ACTIVE, value) = false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATEDATE", DbType:="DateTime")>  _
	Public Property CREATEDATE() As System.Nullable(Of Date)
		Get
			Return Me._CREATEDATE
		End Get
		Set
			If (Me._CREATEDATE.Equals(value) = false) Then
				Me.OnCREATEDATEChanging(value)
				Me.SendPropertyChanging
				Me._CREATEDATE = value
				Me.SendPropertyChanged("CREATEDATE")
				Me.OnCREATEDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATEBY", DbType:="VarChar(50)")>  _
	Public Property CREATEBY() As String
		Get
			Return Me._CREATEBY
		End Get
		Set
			If (String.Equals(Me._CREATEBY, value) = false) Then
				Me.OnCREATEBYChanging(value)
				Me.SendPropertyChanging
				Me._CREATEBY = value
				Me.SendPropertyChanged("CREATEBY")
				Me.OnCREATEBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODIFYDATE", DbType:="DateTime")>  _
	Public Property MODIFYDATE() As System.Nullable(Of Date)
		Get
			Return Me._MODIFYDATE
		End Get
		Set
			If (Me._MODIFYDATE.Equals(value) = false) Then
				Me.OnMODIFYDATEChanging(value)
				Me.SendPropertyChanging
				Me._MODIFYDATE = value
				Me.SendPropertyChanged("MODIFYDATE")
				Me.OnMODIFYDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODIFYBY", DbType:="VarChar(50)")>  _
	Public Property MODIFYBY() As String
		Get
			Return Me._MODIFYBY
		End Get
		Set
			If (String.Equals(Me._MODIFYBY, value) = false) Then
				Me.OnMODIFYBYChanging(value)
				Me.SendPropertyChanging
				Me._MODIFYBY = value
				Me.SendPropertyChanged("MODIFYBY")
				Me.OnMODIFYBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USERNAME", DbType:="VarChar(50)")>  _
	Public Property USERNAME() As String
		Get
			Return Me._USERNAME
		End Get
		Set
			If (String.Equals(Me._USERNAME, value) = false) Then
				Me.OnUSERNAMEChanging(value)
				Me.SendPropertyChanging
				Me._USERNAME = value
				Me.SendPropertyChanged("USERNAME")
				Me.OnUSERNAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE_ID", DbType:="Int")>  _
	Public Property CUBE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CUBE_ID
		End Get
		Set
			If (Me._CUBE_ID.Equals(value) = false) Then
				Me.OnCUBE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CUBE_ID = value
				Me.SendPropertyChanged("CUBE_ID")
				Me.OnCUBE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowColumnGrandTotals", DbType:="Bit")>  _
	Public Property ShowColumnGrandTotals() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowColumnGrandTotals
		End Get
		Set
			If (Me._ShowColumnGrandTotals.Equals(value) = false) Then
				Me.OnShowColumnGrandTotalsChanging(value)
				Me.SendPropertyChanging
				Me._ShowColumnGrandTotals = value
				Me.SendPropertyChanged("ShowColumnGrandTotals")
				Me.OnShowColumnGrandTotalsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowColumnTotals", DbType:="Bit")>  _
	Public Property ShowColumnTotals() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowColumnTotals
		End Get
		Set
			If (Me._ShowColumnTotals.Equals(value) = false) Then
				Me.OnShowColumnTotalsChanging(value)
				Me.SendPropertyChanging
				Me._ShowColumnTotals = value
				Me.SendPropertyChanged("ShowColumnTotals")
				Me.OnShowColumnTotalsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowRowGrandTotals", DbType:="Bit")>  _
	Public Property ShowRowGrandTotals() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowRowGrandTotals
		End Get
		Set
			If (Me._ShowRowGrandTotals.Equals(value) = false) Then
				Me.OnShowRowGrandTotalsChanging(value)
				Me.SendPropertyChanging
				Me._ShowRowGrandTotals = value
				Me.SendPropertyChanged("ShowRowGrandTotals")
				Me.OnShowRowGrandTotalsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowRowTotals", DbType:="Bit")>  _
	Public Property ShowRowTotals() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowRowTotals
		End Get
		Set
			If (Me._ShowRowTotals.Equals(value) = false) Then
				Me.OnShowRowTotalsChanging(value)
				Me.SendPropertyChanging
				Me._ShowRowTotals = value
				Me.SendPropertyChanged("ShowRowTotals")
				Me.OnShowRowTotalsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowGrandTotalsForSingleValues", DbType:="Bit")>  _
	Public Property ShowGrandTotalsForSingleValues() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowGrandTotalsForSingleValues
		End Get
		Set
			If (Me._ShowGrandTotalsForSingleValues.Equals(value) = false) Then
				Me.OnShowGrandTotalsForSingleValuesChanging(value)
				Me.SendPropertyChanging
				Me._ShowGrandTotalsForSingleValues = value
				Me.SendPropertyChanged("ShowGrandTotalsForSingleValues")
				Me.OnShowGrandTotalsForSingleValuesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowTotalsForSingleValues", DbType:="Bit")>  _
	Public Property ShowTotalsForSingleValues() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowTotalsForSingleValues
		End Get
		Set
			If (Me._ShowTotalsForSingleValues.Equals(value) = false) Then
				Me.OnShowTotalsForSingleValuesChanging(value)
				Me.SendPropertyChanging
				Me._ShowTotalsForSingleValues = value
				Me.SendPropertyChanged("ShowTotalsForSingleValues")
				Me.OnShowTotalsForSingleValuesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBI_User_tblBIAttribute_User", Storage:="_tblBIAttribute_Users", ThisKey:="BUID", OtherKey:="BUID")>  _
	Public Property tblBIAttribute_Users() As EntitySet(Of tblBIAttribute_User)
		Get
			Return Me._tblBIAttribute_Users
		End Get
		Set
			Me._tblBIAttribute_Users.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblBIAttribute_Users(ByVal entity As tblBIAttribute_User)
		Me.SendPropertyChanging
		entity.tblBI_User = Me
	End Sub
	
	Private Sub detach_tblBIAttribute_Users(ByVal entity As tblBIAttribute_User)
		Me.SendPropertyChanging
		entity.tblBI_User = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBIAttribute_User")>  _
Partial Public Class tblBIAttribute_User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FIELD As String
	
	Private _BUID As Integer
	
	Private _AREA As System.Nullable(Of Integer)
	
	Private _ORDERBY As System.Nullable(Of Integer)
	
	Private _FIELDTYPE As String
	
	Private _AREAINDEX As System.Nullable(Of Integer)
	
	Private _SortBySummaryInfo As String
	
	Private _tblBIFilter_Users As EntitySet(Of tblBIFilter_User)
	
	Private _tblBI_User As EntityRef(Of tblBI_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFIELDChanging(value As String)
    End Sub
    Partial Private Sub OnFIELDChanged()
    End Sub
    Partial Private Sub OnBUIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBUIDChanged()
    End Sub
    Partial Private Sub OnAREAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAREAChanged()
    End Sub
    Partial Private Sub OnORDERBYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDERBYChanged()
    End Sub
    Partial Private Sub OnFIELDTYPEChanging(value As String)
    End Sub
    Partial Private Sub OnFIELDTYPEChanged()
    End Sub
    Partial Private Sub OnAREAINDEXChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAREAINDEXChanged()
    End Sub
    Partial Private Sub OnSortBySummaryInfoChanging(value As String)
    End Sub
    Partial Private Sub OnSortBySummaryInfoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblBIFilter_Users = New EntitySet(Of tblBIFilter_User)(AddressOf Me.attach_tblBIFilter_Users, AddressOf Me.detach_tblBIFilter_Users)
		Me._tblBI_User = CType(Nothing, EntityRef(Of tblBI_User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD", DbType:="VarChar(150) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FIELD() As String
		Get
			Return Me._FIELD
		End Get
		Set
			If (String.Equals(Me._FIELD, value) = false) Then
				Me.OnFIELDChanging(value)
				Me.SendPropertyChanging
				Me._FIELD = value
				Me.SendPropertyChanged("FIELD")
				Me.OnFIELDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BUID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property BUID() As Integer
		Get
			Return Me._BUID
		End Get
		Set
			If ((Me._BUID = value)  _
						= false) Then
				If Me._tblBI_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBUIDChanging(value)
				Me.SendPropertyChanging
				Me._BUID = value
				Me.SendPropertyChanged("BUID")
				Me.OnBUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREA", DbType:="Int")>  _
	Public Property AREA() As System.Nullable(Of Integer)
		Get
			Return Me._AREA
		End Get
		Set
			If (Me._AREA.Equals(value) = false) Then
				Me.OnAREAChanging(value)
				Me.SendPropertyChanging
				Me._AREA = value
				Me.SendPropertyChanged("AREA")
				Me.OnAREAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDERBY", DbType:="Int")>  _
	Public Property ORDERBY() As System.Nullable(Of Integer)
		Get
			Return Me._ORDERBY
		End Get
		Set
			If (Me._ORDERBY.Equals(value) = false) Then
				Me.OnORDERBYChanging(value)
				Me.SendPropertyChanging
				Me._ORDERBY = value
				Me.SendPropertyChanged("ORDERBY")
				Me.OnORDERBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELDTYPE", DbType:="VarChar(50)")>  _
	Public Property FIELDTYPE() As String
		Get
			Return Me._FIELDTYPE
		End Get
		Set
			If (String.Equals(Me._FIELDTYPE, value) = false) Then
				Me.OnFIELDTYPEChanging(value)
				Me.SendPropertyChanging
				Me._FIELDTYPE = value
				Me.SendPropertyChanged("FIELDTYPE")
				Me.OnFIELDTYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREAINDEX", DbType:="Int")>  _
	Public Property AREAINDEX() As System.Nullable(Of Integer)
		Get
			Return Me._AREAINDEX
		End Get
		Set
			If (Me._AREAINDEX.Equals(value) = false) Then
				Me.OnAREAINDEXChanging(value)
				Me.SendPropertyChanging
				Me._AREAINDEX = value
				Me.SendPropertyChanged("AREAINDEX")
				Me.OnAREAINDEXChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortBySummaryInfo", DbType:="NVarChar(100)")>  _
	Public Property SortBySummaryInfo() As String
		Get
			Return Me._SortBySummaryInfo
		End Get
		Set
			If (String.Equals(Me._SortBySummaryInfo, value) = false) Then
				Me.OnSortBySummaryInfoChanging(value)
				Me.SendPropertyChanging
				Me._SortBySummaryInfo = value
				Me.SendPropertyChanged("SortBySummaryInfo")
				Me.OnSortBySummaryInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBIAttribute_User_tblBIFilter_User", Storage:="_tblBIFilter_Users", ThisKey:="FIELD,BUID", OtherKey:="FIELD,BUID")>  _
	Public Property tblBIFilter_Users() As EntitySet(Of tblBIFilter_User)
		Get
			Return Me._tblBIFilter_Users
		End Get
		Set
			Me._tblBIFilter_Users.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBI_User_tblBIAttribute_User", Storage:="_tblBI_User", ThisKey:="BUID", OtherKey:="BUID", IsForeignKey:=true)>  _
	Public Property tblBI_User() As tblBI_User
		Get
			Return Me._tblBI_User.Entity
		End Get
		Set
			Dim previousValue As tblBI_User = Me._tblBI_User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblBI_User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblBI_User.Entity = Nothing
					previousValue.tblBIAttribute_Users.Remove(Me)
				End If
				Me._tblBI_User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblBIAttribute_Users.Add(Me)
					Me._BUID = value.BUID
				Else
					Me._BUID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblBI_User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblBIFilter_Users(ByVal entity As tblBIFilter_User)
		Me.SendPropertyChanging
		entity.tblBIAttribute_User = Me
	End Sub
	
	Private Sub detach_tblBIFilter_Users(ByVal entity As tblBIFilter_User)
		Me.SendPropertyChanging
		entity.tblBIAttribute_User = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBIAttribute")>  _
Partial Public Class tblBIAttribute
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FIELD As String
	
	Private _BID As Integer
	
	Private _AREA As System.Nullable(Of Integer)
	
	Private _ORDERBY As System.Nullable(Of Integer)
	
	Private _FIELDTYPE As String
	
	Private _AREAINDEX As System.Nullable(Of Integer)
	
	Private _SortBySummaryInfo As String
	
	Private _tblBIFilters As EntitySet(Of tblBIFilter)
	
	Private _tblBI As EntityRef(Of tblBI)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFIELDChanging(value As String)
    End Sub
    Partial Private Sub OnFIELDChanged()
    End Sub
    Partial Private Sub OnBIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBIDChanged()
    End Sub
    Partial Private Sub OnAREAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAREAChanged()
    End Sub
    Partial Private Sub OnORDERBYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDERBYChanged()
    End Sub
    Partial Private Sub OnFIELDTYPEChanging(value As String)
    End Sub
    Partial Private Sub OnFIELDTYPEChanged()
    End Sub
    Partial Private Sub OnAREAINDEXChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAREAINDEXChanged()
    End Sub
    Partial Private Sub OnSortBySummaryInfoChanging(value As String)
    End Sub
    Partial Private Sub OnSortBySummaryInfoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblBIFilters = New EntitySet(Of tblBIFilter)(AddressOf Me.attach_tblBIFilters, AddressOf Me.detach_tblBIFilters)
		Me._tblBI = CType(Nothing, EntityRef(Of tblBI))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD", DbType:="VarChar(150) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FIELD() As String
		Get
			Return Me._FIELD
		End Get
		Set
			If (String.Equals(Me._FIELD, value) = false) Then
				Me.OnFIELDChanging(value)
				Me.SendPropertyChanging
				Me._FIELD = value
				Me.SendPropertyChanged("FIELD")
				Me.OnFIELDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property BID() As Integer
		Get
			Return Me._BID
		End Get
		Set
			If ((Me._BID = value)  _
						= false) Then
				If Me._tblBI.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBIDChanging(value)
				Me.SendPropertyChanging
				Me._BID = value
				Me.SendPropertyChanged("BID")
				Me.OnBIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREA", DbType:="Int")>  _
	Public Property AREA() As System.Nullable(Of Integer)
		Get
			Return Me._AREA
		End Get
		Set
			If (Me._AREA.Equals(value) = false) Then
				Me.OnAREAChanging(value)
				Me.SendPropertyChanging
				Me._AREA = value
				Me.SendPropertyChanged("AREA")
				Me.OnAREAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDERBY", DbType:="Int")>  _
	Public Property ORDERBY() As System.Nullable(Of Integer)
		Get
			Return Me._ORDERBY
		End Get
		Set
			If (Me._ORDERBY.Equals(value) = false) Then
				Me.OnORDERBYChanging(value)
				Me.SendPropertyChanging
				Me._ORDERBY = value
				Me.SendPropertyChanged("ORDERBY")
				Me.OnORDERBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELDTYPE", DbType:="VarChar(50)")>  _
	Public Property FIELDTYPE() As String
		Get
			Return Me._FIELDTYPE
		End Get
		Set
			If (String.Equals(Me._FIELDTYPE, value) = false) Then
				Me.OnFIELDTYPEChanging(value)
				Me.SendPropertyChanging
				Me._FIELDTYPE = value
				Me.SendPropertyChanged("FIELDTYPE")
				Me.OnFIELDTYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREAINDEX", DbType:="Int")>  _
	Public Property AREAINDEX() As System.Nullable(Of Integer)
		Get
			Return Me._AREAINDEX
		End Get
		Set
			If (Me._AREAINDEX.Equals(value) = false) Then
				Me.OnAREAINDEXChanging(value)
				Me.SendPropertyChanging
				Me._AREAINDEX = value
				Me.SendPropertyChanged("AREAINDEX")
				Me.OnAREAINDEXChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SortBySummaryInfo", DbType:="NVarChar(100)")>  _
	Public Property SortBySummaryInfo() As String
		Get
			Return Me._SortBySummaryInfo
		End Get
		Set
			If (String.Equals(Me._SortBySummaryInfo, value) = false) Then
				Me.OnSortBySummaryInfoChanging(value)
				Me.SendPropertyChanging
				Me._SortBySummaryInfo = value
				Me.SendPropertyChanged("SortBySummaryInfo")
				Me.OnSortBySummaryInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBIAttribute_tblBIFilter", Storage:="_tblBIFilters", ThisKey:="FIELD,BID", OtherKey:="FIELD,BID")>  _
	Public Property tblBIFilters() As EntitySet(Of tblBIFilter)
		Get
			Return Me._tblBIFilters
		End Get
		Set
			Me._tblBIFilters.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBI_tblBIAttribute", Storage:="_tblBI", ThisKey:="BID", OtherKey:="BID", IsForeignKey:=true)>  _
	Public Property tblBI() As tblBI
		Get
			Return Me._tblBI.Entity
		End Get
		Set
			Dim previousValue As tblBI = Me._tblBI.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblBI.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblBI.Entity = Nothing
					previousValue.tblBIAttributes.Remove(Me)
				End If
				Me._tblBI.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblBIAttributes.Add(Me)
					Me._BID = value.BID
				Else
					Me._BID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblBI")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblBIFilters(ByVal entity As tblBIFilter)
		Me.SendPropertyChanging
		entity.tblBIAttribute = Me
	End Sub
	
	Private Sub detach_tblBIFilters(ByVal entity As tblBIFilter)
		Me.SendPropertyChanging
		entity.tblBIAttribute = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAttribute")>  _
Partial Public Class tblAttribute
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _FOLDER As String
	
	Private _ATTRIBUTE As String
	
	Private _FIELD As String
	
	Private _VISIBLE As String
	
	Private _FormatType As String
	
	Private _CUBE_ID As Integer
	
	Private _TYPE As String
	
	Private _Description As String
	
	Private _tblCube As EntityRef(Of tblCube)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFOLDERChanging(value As String)
    End Sub
    Partial Private Sub OnFOLDERChanged()
    End Sub
    Partial Private Sub OnATTRIBUTEChanging(value As String)
    End Sub
    Partial Private Sub OnATTRIBUTEChanged()
    End Sub
    Partial Private Sub OnFIELDChanging(value As String)
    End Sub
    Partial Private Sub OnFIELDChanged()
    End Sub
    Partial Private Sub OnVISIBLEChanging(value As String)
    End Sub
    Partial Private Sub OnVISIBLEChanged()
    End Sub
    Partial Private Sub OnFormatTypeChanging(value As String)
    End Sub
    Partial Private Sub OnFormatTypeChanged()
    End Sub
    Partial Private Sub OnCUBE_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCUBE_IDChanged()
    End Sub
    Partial Private Sub OnTYPEChanging(value As String)
    End Sub
    Partial Private Sub OnTYPEChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblCube = CType(Nothing, EntityRef(Of tblCube))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FOLDER", DbType:="VarChar(50)")>  _
	Public Property FOLDER() As String
		Get
			Return Me._FOLDER
		End Get
		Set
			If (String.Equals(Me._FOLDER, value) = false) Then
				Me.OnFOLDERChanging(value)
				Me.SendPropertyChanging
				Me._FOLDER = value
				Me.SendPropertyChanged("FOLDER")
				Me.OnFOLDERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ATTRIBUTE", DbType:="VarChar(50)")>  _
	Public Property ATTRIBUTE() As String
		Get
			Return Me._ATTRIBUTE
		End Get
		Set
			If (String.Equals(Me._ATTRIBUTE, value) = false) Then
				Me.OnATTRIBUTEChanging(value)
				Me.SendPropertyChanging
				Me._ATTRIBUTE = value
				Me.SendPropertyChanged("ATTRIBUTE")
				Me.OnATTRIBUTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD", DbType:="VarChar(150) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FIELD() As String
		Get
			Return Me._FIELD
		End Get
		Set
			If (String.Equals(Me._FIELD, value) = false) Then
				Me.OnFIELDChanging(value)
				Me.SendPropertyChanging
				Me._FIELD = value
				Me.SendPropertyChanged("FIELD")
				Me.OnFIELDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VISIBLE", DbType:="VarChar(50)")>  _
	Public Property VISIBLE() As String
		Get
			Return Me._VISIBLE
		End Get
		Set
			If (String.Equals(Me._VISIBLE, value) = false) Then
				Me.OnVISIBLEChanging(value)
				Me.SendPropertyChanging
				Me._VISIBLE = value
				Me.SendPropertyChanged("VISIBLE")
				Me.OnVISIBLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FormatType", DbType:="VarChar(50)")>  _
	Public Property FormatType() As String
		Get
			Return Me._FormatType
		End Get
		Set
			If (String.Equals(Me._FormatType, value) = false) Then
				Me.OnFormatTypeChanging(value)
				Me.SendPropertyChanging
				Me._FormatType = value
				Me.SendPropertyChanged("FormatType")
				Me.OnFormatTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE_ID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property CUBE_ID() As Integer
		Get
			Return Me._CUBE_ID
		End Get
		Set
			If ((Me._CUBE_ID = value)  _
						= false) Then
				If Me._tblCube.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCUBE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CUBE_ID = value
				Me.SendPropertyChanged("CUBE_ID")
				Me.OnCUBE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TYPE", DbType:="VarChar(50)")>  _
	Public Property TYPE() As String
		Get
			Return Me._TYPE
		End Get
		Set
			If (String.Equals(Me._TYPE, value) = false) Then
				Me.OnTYPEChanging(value)
				Me.SendPropertyChanging
				Me._TYPE = value
				Me.SendPropertyChanged("TYPE")
				Me.OnTYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(255)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCube_tblAttribute", Storage:="_tblCube", ThisKey:="CUBE_ID", OtherKey:="CUBE_ID", IsForeignKey:=true)>  _
	Public Property tblCube() As tblCube
		Get
			Return Me._tblCube.Entity
		End Get
		Set
			Dim previousValue As tblCube = Me._tblCube.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblCube.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblCube.Entity = Nothing
					previousValue.tblAttributes.Remove(Me)
				End If
				Me._tblCube.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblAttributes.Add(Me)
					Me._CUBE_ID = value.CUBE_ID
				Else
					Me._CUBE_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblCube")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDashBoard_DataSource_Assignment")>  _
Partial Public Class tblDashBoard_DataSource_Assignment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _DS_ID As System.Nullable(Of Integer)
	
	Private _UserName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnDS_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDS_IDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DS_ID", DbType:="Int")>  _
	Public Property DS_ID() As System.Nullable(Of Integer)
		Get
			Return Me._DS_ID
		End Get
		Set
			If (Me._DS_ID.Equals(value) = false) Then
				Me.OnDS_IDChanging(value)
				Me.SendPropertyChanging
				Me._DS_ID = value
				Me.SendPropertyChanged("DS_ID")
				Me.OnDS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="VarChar(50)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDashBoard_DataSource")>  _
Partial Public Class tblDashBoard_DataSource
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DS_ID As Integer
	
	Private _TITLE As String
	
	Private _CONN As String
	
	Private _CONN_TYPE As String
	
	Private _PortalId As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDS_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDS_IDChanged()
    End Sub
    Partial Private Sub OnTITLEChanging(value As String)
    End Sub
    Partial Private Sub OnTITLEChanged()
    End Sub
    Partial Private Sub OnCONNChanging(value As String)
    End Sub
    Partial Private Sub OnCONNChanged()
    End Sub
    Partial Private Sub OnCONN_TYPEChanging(value As String)
    End Sub
    Partial Private Sub OnCONN_TYPEChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DS_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DS_ID() As Integer
		Get
			Return Me._DS_ID
		End Get
		Set
			If ((Me._DS_ID = value)  _
						= false) Then
				Me.OnDS_IDChanging(value)
				Me.SendPropertyChanging
				Me._DS_ID = value
				Me.SendPropertyChanged("DS_ID")
				Me.OnDS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TITLE", DbType:="VarChar(255)")>  _
	Public Property TITLE() As String
		Get
			Return Me._TITLE
		End Get
		Set
			If (String.Equals(Me._TITLE, value) = false) Then
				Me.OnTITLEChanging(value)
				Me.SendPropertyChanging
				Me._TITLE = value
				Me.SendPropertyChanged("TITLE")
				Me.OnTITLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONN", DbType:="VarChar(255)")>  _
	Public Property CONN() As String
		Get
			Return Me._CONN
		End Get
		Set
			If (String.Equals(Me._CONN, value) = false) Then
				Me.OnCONNChanging(value)
				Me.SendPropertyChanging
				Me._CONN = value
				Me.SendPropertyChanged("CONN")
				Me.OnCONNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONN_TYPE", DbType:="VarChar(100)")>  _
	Public Property CONN_TYPE() As String
		Get
			Return Me._CONN_TYPE
		End Get
		Set
			If (String.Equals(Me._CONN_TYPE, value) = false) Then
				Me.OnCONN_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._CONN_TYPE = value
				Me.SendPropertyChanged("CONN_TYPE")
				Me.OnCONN_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDataSourceFile")>  _
Partial Public Class tblDataSourceFile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Title As String
	
	Private _FileName As String
	
	Private _SourceFile As String
	
	Private _SheetName As String
	
	Private _CellRange As String
	
	Private _GUID As String
	
	Private _ASATDATE As System.Nullable(Of Date)
	
	Private _DESCRIPTION As String
	
	Private _Owner As String
	
	Private _CREATEDATE As System.Nullable(Of Date)
	
	Private _CREATEBY As String
	
	Private _MODIFYDATE As System.Nullable(Of Date)
	
	Private _MODIFYBY As String
	
	Private _PortalId As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnFileNameChanged()
    End Sub
    Partial Private Sub OnSourceFileChanging(value As String)
    End Sub
    Partial Private Sub OnSourceFileChanged()
    End Sub
    Partial Private Sub OnSheetNameChanging(value As String)
    End Sub
    Partial Private Sub OnSheetNameChanged()
    End Sub
    Partial Private Sub OnCellRangeChanging(value As String)
    End Sub
    Partial Private Sub OnCellRangeChanged()
    End Sub
    Partial Private Sub OnGUIDChanging(value As String)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    Partial Private Sub OnASATDATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnASATDATEChanged()
    End Sub
    Partial Private Sub OnDESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTIONChanged()
    End Sub
    Partial Private Sub OnOwnerChanging(value As String)
    End Sub
    Partial Private Sub OnOwnerChanged()
    End Sub
    Partial Private Sub OnCREATEDATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCREATEDATEChanged()
    End Sub
    Partial Private Sub OnCREATEBYChanging(value As String)
    End Sub
    Partial Private Sub OnCREATEBYChanged()
    End Sub
    Partial Private Sub OnMODIFYDATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnMODIFYDATEChanged()
    End Sub
    Partial Private Sub OnMODIFYBYChanging(value As String)
    End Sub
    Partial Private Sub OnMODIFYBYChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(100)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileName", DbType:="NVarChar(100)")>  _
	Public Property FileName() As String
		Get
			Return Me._FileName
		End Get
		Set
			If (String.Equals(Me._FileName, value) = false) Then
				Me.OnFileNameChanging(value)
				Me.SendPropertyChanging
				Me._FileName = value
				Me.SendPropertyChanged("FileName")
				Me.OnFileNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceFile", DbType:="NVarChar(255)")>  _
	Public Property SourceFile() As String
		Get
			Return Me._SourceFile
		End Get
		Set
			If (String.Equals(Me._SourceFile, value) = false) Then
				Me.OnSourceFileChanging(value)
				Me.SendPropertyChanging
				Me._SourceFile = value
				Me.SendPropertyChanged("SourceFile")
				Me.OnSourceFileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SheetName", DbType:="NVarChar(50)")>  _
	Public Property SheetName() As String
		Get
			Return Me._SheetName
		End Get
		Set
			If (String.Equals(Me._SheetName, value) = false) Then
				Me.OnSheetNameChanging(value)
				Me.SendPropertyChanging
				Me._SheetName = value
				Me.SendPropertyChanged("SheetName")
				Me.OnSheetNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CellRange", DbType:="NVarChar(50)")>  _
	Public Property CellRange() As String
		Get
			Return Me._CellRange
		End Get
		Set
			If (String.Equals(Me._CellRange, value) = false) Then
				Me.OnCellRangeChanging(value)
				Me.SendPropertyChanging
				Me._CellRange = value
				Me.SendPropertyChanged("CellRange")
				Me.OnCellRangeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="VarChar(255)")>  _
	Public Property GUID() As String
		Get
			Return Me._GUID
		End Get
		Set
			If (String.Equals(Me._GUID, value) = false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ASATDATE", DbType:="DateTime")>  _
	Public Property ASATDATE() As System.Nullable(Of Date)
		Get
			Return Me._ASATDATE
		End Get
		Set
			If (Me._ASATDATE.Equals(value) = false) Then
				Me.OnASATDATEChanging(value)
				Me.SendPropertyChanging
				Me._ASATDATE = value
				Me.SendPropertyChanged("ASATDATE")
				Me.OnASATDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPTION", DbType:="VarChar(255)")>  _
	Public Property DESCRIPTION() As String
		Get
			Return Me._DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._DESCRIPTION, value) = false) Then
				Me.OnDESCRIPTIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPTION = value
				Me.SendPropertyChanged("DESCRIPTION")
				Me.OnDESCRIPTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Owner", DbType:="NVarChar(100)")>  _
	Public Property Owner() As String
		Get
			Return Me._Owner
		End Get
		Set
			If (String.Equals(Me._Owner, value) = false) Then
				Me.OnOwnerChanging(value)
				Me.SendPropertyChanging
				Me._Owner = value
				Me.SendPropertyChanged("Owner")
				Me.OnOwnerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATEDATE", DbType:="DateTime")>  _
	Public Property CREATEDATE() As System.Nullable(Of Date)
		Get
			Return Me._CREATEDATE
		End Get
		Set
			If (Me._CREATEDATE.Equals(value) = false) Then
				Me.OnCREATEDATEChanging(value)
				Me.SendPropertyChanging
				Me._CREATEDATE = value
				Me.SendPropertyChanged("CREATEDATE")
				Me.OnCREATEDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATEBY", DbType:="VarChar(50)")>  _
	Public Property CREATEBY() As String
		Get
			Return Me._CREATEBY
		End Get
		Set
			If (String.Equals(Me._CREATEBY, value) = false) Then
				Me.OnCREATEBYChanging(value)
				Me.SendPropertyChanging
				Me._CREATEBY = value
				Me.SendPropertyChanged("CREATEBY")
				Me.OnCREATEBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODIFYDATE", DbType:="DateTime")>  _
	Public Property MODIFYDATE() As System.Nullable(Of Date)
		Get
			Return Me._MODIFYDATE
		End Get
		Set
			If (Me._MODIFYDATE.Equals(value) = false) Then
				Me.OnMODIFYDATEChanging(value)
				Me.SendPropertyChanging
				Me._MODIFYDATE = value
				Me.SendPropertyChanged("MODIFYDATE")
				Me.OnMODIFYDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODIFYBY", DbType:="VarChar(50)")>  _
	Public Property MODIFYBY() As String
		Get
			Return Me._MODIFYBY
		End Get
		Set
			If (String.Equals(Me._MODIFYBY, value) = false) Then
				Me.OnMODIFYBYChanging(value)
				Me.SendPropertyChanging
				Me._MODIFYBY = value
				Me.SendPropertyChanged("MODIFYBY")
				Me.OnMODIFYBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDataSourceBI")>  _
Partial Public Class tblDataSourceBI
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BID As Integer
	
	Private _No As System.Nullable(Of Integer)
	
	Private _TITLE As String
	
	Private _DESCRIPTION As String
	
	Private _DEPARTMENT As String
	
	Private _ParentID As System.Nullable(Of Integer)
	
	Private _ACTIVE As String
	
	Private _CREATEDATE As System.Nullable(Of Date)
	
	Private _CREATEBY As String
	
	Private _MODIFYDATE As System.Nullable(Of Date)
	
	Private _MODIFYBY As String
	
	Private _GUID As String
	
	Private _DS_ID As System.Nullable(Of Integer)
	
	Private _ShowColumnGrandTotals As System.Nullable(Of Boolean)
	
	Private _ShowColumnTotals As System.Nullable(Of Boolean)
	
	Private _ShowRowGrandTotals As System.Nullable(Of Boolean)
	
	Private _ShowRowTotals As System.Nullable(Of Boolean)
	
	Private _ShowGrandTotalsForSingleValues As System.Nullable(Of Boolean)
	
	Private _ShowTotalsForSingleValues As System.Nullable(Of Boolean)
	
	Private _Owner As String
	
	Private _PortalId As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBIDChanged()
    End Sub
    Partial Private Sub OnNoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNoChanged()
    End Sub
    Partial Private Sub OnTITLEChanging(value As String)
    End Sub
    Partial Private Sub OnTITLEChanged()
    End Sub
    Partial Private Sub OnDESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTIONChanged()
    End Sub
    Partial Private Sub OnDEPARTMENTChanging(value As String)
    End Sub
    Partial Private Sub OnDEPARTMENTChanged()
    End Sub
    Partial Private Sub OnParentIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentIDChanged()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As String)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnCREATEDATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCREATEDATEChanged()
    End Sub
    Partial Private Sub OnCREATEBYChanging(value As String)
    End Sub
    Partial Private Sub OnCREATEBYChanged()
    End Sub
    Partial Private Sub OnMODIFYDATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnMODIFYDATEChanged()
    End Sub
    Partial Private Sub OnMODIFYBYChanging(value As String)
    End Sub
    Partial Private Sub OnMODIFYBYChanged()
    End Sub
    Partial Private Sub OnGUIDChanging(value As String)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    Partial Private Sub OnDS_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDS_IDChanged()
    End Sub
    Partial Private Sub OnShowColumnGrandTotalsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowColumnGrandTotalsChanged()
    End Sub
    Partial Private Sub OnShowColumnTotalsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowColumnTotalsChanged()
    End Sub
    Partial Private Sub OnShowRowGrandTotalsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowRowGrandTotalsChanged()
    End Sub
    Partial Private Sub OnShowRowTotalsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowRowTotalsChanged()
    End Sub
    Partial Private Sub OnShowGrandTotalsForSingleValuesChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowGrandTotalsForSingleValuesChanged()
    End Sub
    Partial Private Sub OnShowTotalsForSingleValuesChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowTotalsForSingleValuesChanged()
    End Sub
    Partial Private Sub OnOwnerChanging(value As String)
    End Sub
    Partial Private Sub OnOwnerChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BID() As Integer
		Get
			Return Me._BID
		End Get
		Set
			If ((Me._BID = value)  _
						= false) Then
				Me.OnBIDChanging(value)
				Me.SendPropertyChanging
				Me._BID = value
				Me.SendPropertyChanged("BID")
				Me.OnBIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No", DbType:="Int")>  _
	Public Property No() As System.Nullable(Of Integer)
		Get
			Return Me._No
		End Get
		Set
			If (Me._No.Equals(value) = false) Then
				Me.OnNoChanging(value)
				Me.SendPropertyChanging
				Me._No = value
				Me.SendPropertyChanged("No")
				Me.OnNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TITLE", DbType:="VarChar(255)")>  _
	Public Property TITLE() As String
		Get
			Return Me._TITLE
		End Get
		Set
			If (String.Equals(Me._TITLE, value) = false) Then
				Me.OnTITLEChanging(value)
				Me.SendPropertyChanging
				Me._TITLE = value
				Me.SendPropertyChanged("TITLE")
				Me.OnTITLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPTION", DbType:="VarChar(255)")>  _
	Public Property DESCRIPTION() As String
		Get
			Return Me._DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._DESCRIPTION, value) = false) Then
				Me.OnDESCRIPTIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPTION = value
				Me.SendPropertyChanged("DESCRIPTION")
				Me.OnDESCRIPTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEPARTMENT", DbType:="VarChar(50)")>  _
	Public Property DEPARTMENT() As String
		Get
			Return Me._DEPARTMENT
		End Get
		Set
			If (String.Equals(Me._DEPARTMENT, value) = false) Then
				Me.OnDEPARTMENTChanging(value)
				Me.SendPropertyChanging
				Me._DEPARTMENT = value
				Me.SendPropertyChanged("DEPARTMENT")
				Me.OnDEPARTMENTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentID", DbType:="Int")>  _
	Public Property ParentID() As System.Nullable(Of Integer)
		Get
			Return Me._ParentID
		End Get
		Set
			If (Me._ParentID.Equals(value) = false) Then
				Me.OnParentIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentID = value
				Me.SendPropertyChanged("ParentID")
				Me.OnParentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="VarChar(50)")>  _
	Public Property ACTIVE() As String
		Get
			Return Me._ACTIVE
		End Get
		Set
			If (String.Equals(Me._ACTIVE, value) = false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATEDATE", DbType:="DateTime")>  _
	Public Property CREATEDATE() As System.Nullable(Of Date)
		Get
			Return Me._CREATEDATE
		End Get
		Set
			If (Me._CREATEDATE.Equals(value) = false) Then
				Me.OnCREATEDATEChanging(value)
				Me.SendPropertyChanging
				Me._CREATEDATE = value
				Me.SendPropertyChanged("CREATEDATE")
				Me.OnCREATEDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATEBY", DbType:="VarChar(50)")>  _
	Public Property CREATEBY() As String
		Get
			Return Me._CREATEBY
		End Get
		Set
			If (String.Equals(Me._CREATEBY, value) = false) Then
				Me.OnCREATEBYChanging(value)
				Me.SendPropertyChanging
				Me._CREATEBY = value
				Me.SendPropertyChanged("CREATEBY")
				Me.OnCREATEBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODIFYDATE", DbType:="DateTime")>  _
	Public Property MODIFYDATE() As System.Nullable(Of Date)
		Get
			Return Me._MODIFYDATE
		End Get
		Set
			If (Me._MODIFYDATE.Equals(value) = false) Then
				Me.OnMODIFYDATEChanging(value)
				Me.SendPropertyChanging
				Me._MODIFYDATE = value
				Me.SendPropertyChanged("MODIFYDATE")
				Me.OnMODIFYDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODIFYBY", DbType:="VarChar(50)")>  _
	Public Property MODIFYBY() As String
		Get
			Return Me._MODIFYBY
		End Get
		Set
			If (String.Equals(Me._MODIFYBY, value) = false) Then
				Me.OnMODIFYBYChanging(value)
				Me.SendPropertyChanging
				Me._MODIFYBY = value
				Me.SendPropertyChanged("MODIFYBY")
				Me.OnMODIFYBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="VarChar(255)")>  _
	Public Property GUID() As String
		Get
			Return Me._GUID
		End Get
		Set
			If (String.Equals(Me._GUID, value) = false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DS_ID", DbType:="Int")>  _
	Public Property DS_ID() As System.Nullable(Of Integer)
		Get
			Return Me._DS_ID
		End Get
		Set
			If (Me._DS_ID.Equals(value) = false) Then
				Me.OnDS_IDChanging(value)
				Me.SendPropertyChanging
				Me._DS_ID = value
				Me.SendPropertyChanged("DS_ID")
				Me.OnDS_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowColumnGrandTotals", DbType:="Bit")>  _
	Public Property ShowColumnGrandTotals() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowColumnGrandTotals
		End Get
		Set
			If (Me._ShowColumnGrandTotals.Equals(value) = false) Then
				Me.OnShowColumnGrandTotalsChanging(value)
				Me.SendPropertyChanging
				Me._ShowColumnGrandTotals = value
				Me.SendPropertyChanged("ShowColumnGrandTotals")
				Me.OnShowColumnGrandTotalsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowColumnTotals", DbType:="Bit")>  _
	Public Property ShowColumnTotals() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowColumnTotals
		End Get
		Set
			If (Me._ShowColumnTotals.Equals(value) = false) Then
				Me.OnShowColumnTotalsChanging(value)
				Me.SendPropertyChanging
				Me._ShowColumnTotals = value
				Me.SendPropertyChanged("ShowColumnTotals")
				Me.OnShowColumnTotalsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowRowGrandTotals", DbType:="Bit")>  _
	Public Property ShowRowGrandTotals() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowRowGrandTotals
		End Get
		Set
			If (Me._ShowRowGrandTotals.Equals(value) = false) Then
				Me.OnShowRowGrandTotalsChanging(value)
				Me.SendPropertyChanging
				Me._ShowRowGrandTotals = value
				Me.SendPropertyChanged("ShowRowGrandTotals")
				Me.OnShowRowGrandTotalsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowRowTotals", DbType:="Bit")>  _
	Public Property ShowRowTotals() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowRowTotals
		End Get
		Set
			If (Me._ShowRowTotals.Equals(value) = false) Then
				Me.OnShowRowTotalsChanging(value)
				Me.SendPropertyChanging
				Me._ShowRowTotals = value
				Me.SendPropertyChanged("ShowRowTotals")
				Me.OnShowRowTotalsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowGrandTotalsForSingleValues", DbType:="Bit")>  _
	Public Property ShowGrandTotalsForSingleValues() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowGrandTotalsForSingleValues
		End Get
		Set
			If (Me._ShowGrandTotalsForSingleValues.Equals(value) = false) Then
				Me.OnShowGrandTotalsForSingleValuesChanging(value)
				Me.SendPropertyChanging
				Me._ShowGrandTotalsForSingleValues = value
				Me.SendPropertyChanged("ShowGrandTotalsForSingleValues")
				Me.OnShowGrandTotalsForSingleValuesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowTotalsForSingleValues", DbType:="Bit")>  _
	Public Property ShowTotalsForSingleValues() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowTotalsForSingleValues
		End Get
		Set
			If (Me._ShowTotalsForSingleValues.Equals(value) = false) Then
				Me.OnShowTotalsForSingleValuesChanging(value)
				Me.SendPropertyChanging
				Me._ShowTotalsForSingleValues = value
				Me.SendPropertyChanged("ShowTotalsForSingleValues")
				Me.OnShowTotalsForSingleValuesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Owner", DbType:="NVarChar(100)")>  _
	Public Property Owner() As String
		Get
			Return Me._Owner
		End Get
		Set
			If (String.Equals(Me._Owner, value) = false) Then
				Me.OnOwnerChanging(value)
				Me.SendPropertyChanging
				Me._Owner = value
				Me.SendPropertyChanged("Owner")
				Me.OnOwnerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_DataSourceBI_Assignment")>  _
Partial Public Class V_DataSourceBI_Assignment
	
	Private _ID As Integer
	
	Private _BID As Integer
	
	Private _USERNAME As String
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Private _No As System.Nullable(Of Integer)
	
	Private _ParentId As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BID", DbType:="Int NOT NULL")>  _
	Public Property BID() As Integer
		Get
			Return Me._BID
		End Get
		Set
			If ((Me._BID = value)  _
						= false) Then
				Me._BID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USERNAME", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property USERNAME() As String
		Get
			Return Me._USERNAME
		End Get
		Set
			If (String.Equals(Me._USERNAME, value) = false) Then
				Me._USERNAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me._PortalId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No", DbType:="Int")>  _
	Public Property No() As System.Nullable(Of Integer)
		Get
			Return Me._No
		End Get
		Set
			If (Me._No.Equals(value) = false) Then
				Me._No = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentId", DbType:="Int")>  _
	Public Property ParentId() As System.Nullable(Of Integer)
		Get
			Return Me._ParentId
		End Get
		Set
			If (Me._ParentId.Equals(value) = false) Then
				Me._ParentId = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDashBoard")>  _
Partial Public Class tblDashBoard
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DB_ID As Integer
	
	Private _No As System.Nullable(Of Integer)
	
	Private _TITLE As String
	
	Private _DESCRIPTION As String
	
	Private _DEPARTMENT As String
	
	Private _CUBE_ID As System.Nullable(Of Integer)
	
	Private _CREATEDATE As System.Nullable(Of Date)
	
	Private _CREATEBY As String
	
	Private _MODIFYDATE As System.Nullable(Of Date)
	
	Private _MODIFYBY As String
	
	Private _GUID As String
	
	Private _ParentID As System.Nullable(Of Integer)
	
	Private _PortalId As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDB_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDB_IDChanged()
    End Sub
    Partial Private Sub OnNoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNoChanged()
    End Sub
    Partial Private Sub OnTITLEChanging(value As String)
    End Sub
    Partial Private Sub OnTITLEChanged()
    End Sub
    Partial Private Sub OnDESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTIONChanged()
    End Sub
    Partial Private Sub OnDEPARTMENTChanging(value As String)
    End Sub
    Partial Private Sub OnDEPARTMENTChanged()
    End Sub
    Partial Private Sub OnCUBE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCUBE_IDChanged()
    End Sub
    Partial Private Sub OnCREATEDATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCREATEDATEChanged()
    End Sub
    Partial Private Sub OnCREATEBYChanging(value As String)
    End Sub
    Partial Private Sub OnCREATEBYChanged()
    End Sub
    Partial Private Sub OnMODIFYDATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnMODIFYDATEChanged()
    End Sub
    Partial Private Sub OnMODIFYBYChanging(value As String)
    End Sub
    Partial Private Sub OnMODIFYBYChanged()
    End Sub
    Partial Private Sub OnGUIDChanging(value As String)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    Partial Private Sub OnParentIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentIDChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DB_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DB_ID() As Integer
		Get
			Return Me._DB_ID
		End Get
		Set
			If ((Me._DB_ID = value)  _
						= false) Then
				Me.OnDB_IDChanging(value)
				Me.SendPropertyChanging
				Me._DB_ID = value
				Me.SendPropertyChanged("DB_ID")
				Me.OnDB_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No", DbType:="Int")>  _
	Public Property No() As System.Nullable(Of Integer)
		Get
			Return Me._No
		End Get
		Set
			If (Me._No.Equals(value) = false) Then
				Me.OnNoChanging(value)
				Me.SendPropertyChanging
				Me._No = value
				Me.SendPropertyChanged("No")
				Me.OnNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TITLE", DbType:="VarChar(255)")>  _
	Public Property TITLE() As String
		Get
			Return Me._TITLE
		End Get
		Set
			If (String.Equals(Me._TITLE, value) = false) Then
				Me.OnTITLEChanging(value)
				Me.SendPropertyChanging
				Me._TITLE = value
				Me.SendPropertyChanged("TITLE")
				Me.OnTITLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPTION", DbType:="VarChar(255)")>  _
	Public Property DESCRIPTION() As String
		Get
			Return Me._DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._DESCRIPTION, value) = false) Then
				Me.OnDESCRIPTIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPTION = value
				Me.SendPropertyChanged("DESCRIPTION")
				Me.OnDESCRIPTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEPARTMENT", DbType:="VarChar(50)")>  _
	Public Property DEPARTMENT() As String
		Get
			Return Me._DEPARTMENT
		End Get
		Set
			If (String.Equals(Me._DEPARTMENT, value) = false) Then
				Me.OnDEPARTMENTChanging(value)
				Me.SendPropertyChanging
				Me._DEPARTMENT = value
				Me.SendPropertyChanged("DEPARTMENT")
				Me.OnDEPARTMENTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE_ID", DbType:="Int")>  _
	Public Property CUBE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CUBE_ID
		End Get
		Set
			If (Me._CUBE_ID.Equals(value) = false) Then
				Me.OnCUBE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CUBE_ID = value
				Me.SendPropertyChanged("CUBE_ID")
				Me.OnCUBE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATEDATE", DbType:="DateTime")>  _
	Public Property CREATEDATE() As System.Nullable(Of Date)
		Get
			Return Me._CREATEDATE
		End Get
		Set
			If (Me._CREATEDATE.Equals(value) = false) Then
				Me.OnCREATEDATEChanging(value)
				Me.SendPropertyChanging
				Me._CREATEDATE = value
				Me.SendPropertyChanged("CREATEDATE")
				Me.OnCREATEDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATEBY", DbType:="VarChar(50)")>  _
	Public Property CREATEBY() As String
		Get
			Return Me._CREATEBY
		End Get
		Set
			If (String.Equals(Me._CREATEBY, value) = false) Then
				Me.OnCREATEBYChanging(value)
				Me.SendPropertyChanging
				Me._CREATEBY = value
				Me.SendPropertyChanged("CREATEBY")
				Me.OnCREATEBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODIFYDATE", DbType:="DateTime")>  _
	Public Property MODIFYDATE() As System.Nullable(Of Date)
		Get
			Return Me._MODIFYDATE
		End Get
		Set
			If (Me._MODIFYDATE.Equals(value) = false) Then
				Me.OnMODIFYDATEChanging(value)
				Me.SendPropertyChanging
				Me._MODIFYDATE = value
				Me.SendPropertyChanged("MODIFYDATE")
				Me.OnMODIFYDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODIFYBY", DbType:="VarChar(50)")>  _
	Public Property MODIFYBY() As String
		Get
			Return Me._MODIFYBY
		End Get
		Set
			If (String.Equals(Me._MODIFYBY, value) = false) Then
				Me.OnMODIFYBYChanging(value)
				Me.SendPropertyChanging
				Me._MODIFYBY = value
				Me.SendPropertyChanged("MODIFYBY")
				Me.OnMODIFYBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="VarChar(255)")>  _
	Public Property GUID() As String
		Get
			Return Me._GUID
		End Get
		Set
			If (String.Equals(Me._GUID, value) = false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentID", DbType:="Int")>  _
	Public Property ParentID() As System.Nullable(Of Integer)
		Get
			Return Me._ParentID
		End Get
		Set
			If (Me._ParentID.Equals(value) = false) Then
				Me.OnParentIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentID = value
				Me.SendPropertyChanged("ParentID")
				Me.OnParentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_DataSource")>  _
Partial Public Class V_DataSource
	
	Private _GUID As String
	
	Private _TITLE As String
	
	Private _DESCRIPTION As String
	
	Private _CONNTYPE As String
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="VarChar(255)")>  _
	Public Property GUID() As String
		Get
			Return Me._GUID
		End Get
		Set
			If (String.Equals(Me._GUID, value) = false) Then
				Me._GUID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TITLE", DbType:="VarChar(255)")>  _
	Public Property TITLE() As String
		Get
			Return Me._TITLE
		End Get
		Set
			If (String.Equals(Me._TITLE, value) = false) Then
				Me._TITLE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPTION", DbType:="VarChar(255)")>  _
	Public Property DESCRIPTION() As String
		Get
			Return Me._DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._DESCRIPTION, value) = false) Then
				Me._DESCRIPTION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CONNTYPE", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property CONNTYPE() As String
		Get
			Return Me._CONNTYPE
		End Get
		Set
			If (String.Equals(Me._CONNTYPE, value) = false) Then
				Me._CONNTYPE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me._PortalId = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblBI")>  _
Partial Public Class tblBI
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BID As Integer
	
	Private _No As System.Nullable(Of Integer)
	
	Private _TITLE As String
	
	Private _DESCRIPTION As String
	
	Private _DEPARTMENT As String
	
	Private _ParentID As System.Nullable(Of Integer)
	
	Private _ACTIVE As String
	
	Private _CREATEDATE As System.Nullable(Of Date)
	
	Private _CREATEBY As String
	
	Private _MODIFYDATE As System.Nullable(Of Date)
	
	Private _MODIFYBY As String
	
	Private _GUID As String
	
	Private _CUBE_ID As System.Nullable(Of Integer)
	
	Private _ShowColumnGrandTotals As System.Nullable(Of Boolean)
	
	Private _ShowColumnTotals As System.Nullable(Of Boolean)
	
	Private _ShowRowGrandTotals As System.Nullable(Of Boolean)
	
	Private _ShowRowTotals As System.Nullable(Of Boolean)
	
	Private _ShowGrandTotalsForSingleValues As System.Nullable(Of Boolean)
	
	Private _ShowTotalsForSingleValues As System.Nullable(Of Boolean)
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Private _tblBIAssignments As EntitySet(Of tblBIAssignment)
	
	Private _tblBIAttributes As EntitySet(Of tblBIAttribute)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBIDChanged()
    End Sub
    Partial Private Sub OnNoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNoChanged()
    End Sub
    Partial Private Sub OnTITLEChanging(value As String)
    End Sub
    Partial Private Sub OnTITLEChanged()
    End Sub
    Partial Private Sub OnDESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTIONChanged()
    End Sub
    Partial Private Sub OnDEPARTMENTChanging(value As String)
    End Sub
    Partial Private Sub OnDEPARTMENTChanged()
    End Sub
    Partial Private Sub OnParentIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentIDChanged()
    End Sub
    Partial Private Sub OnACTIVEChanging(value As String)
    End Sub
    Partial Private Sub OnACTIVEChanged()
    End Sub
    Partial Private Sub OnCREATEDATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCREATEDATEChanged()
    End Sub
    Partial Private Sub OnCREATEBYChanging(value As String)
    End Sub
    Partial Private Sub OnCREATEBYChanged()
    End Sub
    Partial Private Sub OnMODIFYDATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnMODIFYDATEChanged()
    End Sub
    Partial Private Sub OnMODIFYBYChanging(value As String)
    End Sub
    Partial Private Sub OnMODIFYBYChanged()
    End Sub
    Partial Private Sub OnGUIDChanging(value As String)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    Partial Private Sub OnCUBE_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCUBE_IDChanged()
    End Sub
    Partial Private Sub OnShowColumnGrandTotalsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowColumnGrandTotalsChanged()
    End Sub
    Partial Private Sub OnShowColumnTotalsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowColumnTotalsChanged()
    End Sub
    Partial Private Sub OnShowRowGrandTotalsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowRowGrandTotalsChanged()
    End Sub
    Partial Private Sub OnShowRowTotalsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowRowTotalsChanged()
    End Sub
    Partial Private Sub OnShowGrandTotalsForSingleValuesChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowGrandTotalsForSingleValuesChanged()
    End Sub
    Partial Private Sub OnShowTotalsForSingleValuesChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnShowTotalsForSingleValuesChanged()
    End Sub
    Partial Private Sub OnPortalIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPortalIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblBIAssignments = New EntitySet(Of tblBIAssignment)(AddressOf Me.attach_tblBIAssignments, AddressOf Me.detach_tblBIAssignments)
		Me._tblBIAttributes = New EntitySet(Of tblBIAttribute)(AddressOf Me.attach_tblBIAttributes, AddressOf Me.detach_tblBIAttributes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BID() As Integer
		Get
			Return Me._BID
		End Get
		Set
			If ((Me._BID = value)  _
						= false) Then
				Me.OnBIDChanging(value)
				Me.SendPropertyChanging
				Me._BID = value
				Me.SendPropertyChanged("BID")
				Me.OnBIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No", DbType:="Int")>  _
	Public Property No() As System.Nullable(Of Integer)
		Get
			Return Me._No
		End Get
		Set
			If (Me._No.Equals(value) = false) Then
				Me.OnNoChanging(value)
				Me.SendPropertyChanging
				Me._No = value
				Me.SendPropertyChanged("No")
				Me.OnNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TITLE", DbType:="VarChar(255)")>  _
	Public Property TITLE() As String
		Get
			Return Me._TITLE
		End Get
		Set
			If (String.Equals(Me._TITLE, value) = false) Then
				Me.OnTITLEChanging(value)
				Me.SendPropertyChanging
				Me._TITLE = value
				Me.SendPropertyChanged("TITLE")
				Me.OnTITLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPTION", DbType:="VarChar(255)")>  _
	Public Property DESCRIPTION() As String
		Get
			Return Me._DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._DESCRIPTION, value) = false) Then
				Me.OnDESCRIPTIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPTION = value
				Me.SendPropertyChanged("DESCRIPTION")
				Me.OnDESCRIPTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEPARTMENT", DbType:="VarChar(50)")>  _
	Public Property DEPARTMENT() As String
		Get
			Return Me._DEPARTMENT
		End Get
		Set
			If (String.Equals(Me._DEPARTMENT, value) = false) Then
				Me.OnDEPARTMENTChanging(value)
				Me.SendPropertyChanging
				Me._DEPARTMENT = value
				Me.SendPropertyChanged("DEPARTMENT")
				Me.OnDEPARTMENTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentID", DbType:="Int")>  _
	Public Property ParentID() As System.Nullable(Of Integer)
		Get
			Return Me._ParentID
		End Get
		Set
			If (Me._ParentID.Equals(value) = false) Then
				Me.OnParentIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentID = value
				Me.SendPropertyChanged("ParentID")
				Me.OnParentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACTIVE", DbType:="VarChar(50)")>  _
	Public Property ACTIVE() As String
		Get
			Return Me._ACTIVE
		End Get
		Set
			If (String.Equals(Me._ACTIVE, value) = false) Then
				Me.OnACTIVEChanging(value)
				Me.SendPropertyChanging
				Me._ACTIVE = value
				Me.SendPropertyChanged("ACTIVE")
				Me.OnACTIVEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATEDATE", DbType:="DateTime")>  _
	Public Property CREATEDATE() As System.Nullable(Of Date)
		Get
			Return Me._CREATEDATE
		End Get
		Set
			If (Me._CREATEDATE.Equals(value) = false) Then
				Me.OnCREATEDATEChanging(value)
				Me.SendPropertyChanging
				Me._CREATEDATE = value
				Me.SendPropertyChanged("CREATEDATE")
				Me.OnCREATEDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CREATEBY", DbType:="VarChar(50)")>  _
	Public Property CREATEBY() As String
		Get
			Return Me._CREATEBY
		End Get
		Set
			If (String.Equals(Me._CREATEBY, value) = false) Then
				Me.OnCREATEBYChanging(value)
				Me.SendPropertyChanging
				Me._CREATEBY = value
				Me.SendPropertyChanged("CREATEBY")
				Me.OnCREATEBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODIFYDATE", DbType:="DateTime")>  _
	Public Property MODIFYDATE() As System.Nullable(Of Date)
		Get
			Return Me._MODIFYDATE
		End Get
		Set
			If (Me._MODIFYDATE.Equals(value) = false) Then
				Me.OnMODIFYDATEChanging(value)
				Me.SendPropertyChanging
				Me._MODIFYDATE = value
				Me.SendPropertyChanged("MODIFYDATE")
				Me.OnMODIFYDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MODIFYBY", DbType:="VarChar(50)")>  _
	Public Property MODIFYBY() As String
		Get
			Return Me._MODIFYBY
		End Get
		Set
			If (String.Equals(Me._MODIFYBY, value) = false) Then
				Me.OnMODIFYBYChanging(value)
				Me.SendPropertyChanging
				Me._MODIFYBY = value
				Me.SendPropertyChanged("MODIFYBY")
				Me.OnMODIFYBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="VarChar(255)")>  _
	Public Property GUID() As String
		Get
			Return Me._GUID
		End Get
		Set
			If (String.Equals(Me._GUID, value) = false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CUBE_ID", DbType:="Int")>  _
	Public Property CUBE_ID() As System.Nullable(Of Integer)
		Get
			Return Me._CUBE_ID
		End Get
		Set
			If (Me._CUBE_ID.Equals(value) = false) Then
				Me.OnCUBE_IDChanging(value)
				Me.SendPropertyChanging
				Me._CUBE_ID = value
				Me.SendPropertyChanged("CUBE_ID")
				Me.OnCUBE_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowColumnGrandTotals", DbType:="Bit")>  _
	Public Property ShowColumnGrandTotals() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowColumnGrandTotals
		End Get
		Set
			If (Me._ShowColumnGrandTotals.Equals(value) = false) Then
				Me.OnShowColumnGrandTotalsChanging(value)
				Me.SendPropertyChanging
				Me._ShowColumnGrandTotals = value
				Me.SendPropertyChanged("ShowColumnGrandTotals")
				Me.OnShowColumnGrandTotalsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowColumnTotals", DbType:="Bit")>  _
	Public Property ShowColumnTotals() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowColumnTotals
		End Get
		Set
			If (Me._ShowColumnTotals.Equals(value) = false) Then
				Me.OnShowColumnTotalsChanging(value)
				Me.SendPropertyChanging
				Me._ShowColumnTotals = value
				Me.SendPropertyChanged("ShowColumnTotals")
				Me.OnShowColumnTotalsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowRowGrandTotals", DbType:="Bit")>  _
	Public Property ShowRowGrandTotals() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowRowGrandTotals
		End Get
		Set
			If (Me._ShowRowGrandTotals.Equals(value) = false) Then
				Me.OnShowRowGrandTotalsChanging(value)
				Me.SendPropertyChanging
				Me._ShowRowGrandTotals = value
				Me.SendPropertyChanged("ShowRowGrandTotals")
				Me.OnShowRowGrandTotalsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowRowTotals", DbType:="Bit")>  _
	Public Property ShowRowTotals() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowRowTotals
		End Get
		Set
			If (Me._ShowRowTotals.Equals(value) = false) Then
				Me.OnShowRowTotalsChanging(value)
				Me.SendPropertyChanging
				Me._ShowRowTotals = value
				Me.SendPropertyChanged("ShowRowTotals")
				Me.OnShowRowTotalsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowGrandTotalsForSingleValues", DbType:="Bit")>  _
	Public Property ShowGrandTotalsForSingleValues() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowGrandTotalsForSingleValues
		End Get
		Set
			If (Me._ShowGrandTotalsForSingleValues.Equals(value) = false) Then
				Me.OnShowGrandTotalsForSingleValuesChanging(value)
				Me.SendPropertyChanging
				Me._ShowGrandTotalsForSingleValues = value
				Me.SendPropertyChanged("ShowGrandTotalsForSingleValues")
				Me.OnShowGrandTotalsForSingleValuesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowTotalsForSingleValues", DbType:="Bit")>  _
	Public Property ShowTotalsForSingleValues() As System.Nullable(Of Boolean)
		Get
			Return Me._ShowTotalsForSingleValues
		End Get
		Set
			If (Me._ShowTotalsForSingleValues.Equals(value) = false) Then
				Me.OnShowTotalsForSingleValuesChanging(value)
				Me.SendPropertyChanging
				Me._ShowTotalsForSingleValues = value
				Me.SendPropertyChanged("ShowTotalsForSingleValues")
				Me.OnShowTotalsForSingleValuesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me.OnPortalIdChanging(value)
				Me.SendPropertyChanging
				Me._PortalId = value
				Me.SendPropertyChanged("PortalId")
				Me.OnPortalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBI_tblBIAssignment", Storage:="_tblBIAssignments", ThisKey:="BID", OtherKey:="BID")>  _
	Public Property tblBIAssignments() As EntitySet(Of tblBIAssignment)
		Get
			Return Me._tblBIAssignments
		End Get
		Set
			Me._tblBIAssignments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblBI_tblBIAttribute", Storage:="_tblBIAttributes", ThisKey:="BID", OtherKey:="BID")>  _
	Public Property tblBIAttributes() As EntitySet(Of tblBIAttribute)
		Get
			Return Me._tblBIAttributes
		End Get
		Set
			Me._tblBIAttributes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblBIAssignments(ByVal entity As tblBIAssignment)
		Me.SendPropertyChanging
		entity.tblBI = Me
	End Sub
	
	Private Sub detach_tblBIAssignments(ByVal entity As tblBIAssignment)
		Me.SendPropertyChanging
		entity.tblBI = Nothing
	End Sub
	
	Private Sub attach_tblBIAttributes(ByVal entity As tblBIAttribute)
		Me.SendPropertyChanging
		entity.tblBI = Me
	End Sub
	
	Private Sub detach_tblBIAttributes(ByVal entity As tblBIAttribute)
		Me.SendPropertyChanging
		entity.tblBI = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_Dashboard_Data")>  _
Partial Public Class V_Dashboard_Data
	
	Private _ID As Integer
	
	Private _GUID As String
	
	Private _Caption As String
	
	Private _Dashboard As System.Data.Linq.Binary
	
	Private _DB_GUID As String
	
	Private _DB_ID As Integer
	
	Private _Title As String
	
	Private _DESCRIPTION As String
	
	Private _No As System.Nullable(Of Integer)
	
	Private _ParentID As System.Nullable(Of Integer)
	
	Private _PortalId As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="VarChar(255)")>  _
	Public Property GUID() As String
		Get
			Return Me._GUID
		End Get
		Set
			If (String.Equals(Me._GUID, value) = false) Then
				Me._GUID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Caption", DbType:="VarChar(255)")>  _
	Public Property Caption() As String
		Get
			Return Me._Caption
		End Get
		Set
			If (String.Equals(Me._Caption, value) = false) Then
				Me._Caption = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dashboard", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Dashboard() As System.Data.Linq.Binary
		Get
			Return Me._Dashboard
		End Get
		Set
			If (Object.Equals(Me._Dashboard, value) = false) Then
				Me._Dashboard = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DB_GUID", DbType:="VarChar(255)")>  _
	Public Property DB_GUID() As String
		Get
			Return Me._DB_GUID
		End Get
		Set
			If (String.Equals(Me._DB_GUID, value) = false) Then
				Me._DB_GUID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DB_ID", DbType:="Int NOT NULL")>  _
	Public Property DB_ID() As Integer
		Get
			Return Me._DB_ID
		End Get
		Set
			If ((Me._DB_ID = value)  _
						= false) Then
				Me._DB_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(255)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPTION", DbType:="VarChar(255)")>  _
	Public Property DESCRIPTION() As String
		Get
			Return Me._DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._DESCRIPTION, value) = false) Then
				Me._DESCRIPTION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No", DbType:="Int")>  _
	Public Property No() As System.Nullable(Of Integer)
		Get
			Return Me._No
		End Get
		Set
			If (Me._No.Equals(value) = false) Then
				Me._No = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentID", DbType:="Int")>  _
	Public Property ParentID() As System.Nullable(Of Integer)
		Get
			Return Me._ParentID
		End Get
		Set
			If (Me._ParentID.Equals(value) = false) Then
				Me._ParentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalId", DbType:="Int")>  _
	Public Property PortalId() As System.Nullable(Of Integer)
		Get
			Return Me._PortalId
		End Get
		Set
			If (Me._PortalId.Equals(value) = false) Then
				Me._PortalId = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblDashBoard_Data")>  _
Partial Public Class tblDashBoard_Data
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Dashboard As System.Data.Linq.Binary
	
	Private _Caption As String
	
	Private _DB_GUID As String
	
	Private _DB_ID As System.Nullable(Of Integer)
	
	Private _GUID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnDashboardChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnDashboardChanged()
    End Sub
    Partial Private Sub OnCaptionChanging(value As String)
    End Sub
    Partial Private Sub OnCaptionChanged()
    End Sub
    Partial Private Sub OnDB_GUIDChanging(value As String)
    End Sub
    Partial Private Sub OnDB_GUIDChanged()
    End Sub
    Partial Private Sub OnDB_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDB_IDChanged()
    End Sub
    Partial Private Sub OnGUIDChanging(value As String)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Dashboard", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Dashboard() As System.Data.Linq.Binary
		Get
			Return Me._Dashboard
		End Get
		Set
			If (Object.Equals(Me._Dashboard, value) = false) Then
				Me.OnDashboardChanging(value)
				Me.SendPropertyChanging
				Me._Dashboard = value
				Me.SendPropertyChanged("Dashboard")
				Me.OnDashboardChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Caption", DbType:="VarChar(255)")>  _
	Public Property Caption() As String
		Get
			Return Me._Caption
		End Get
		Set
			If (String.Equals(Me._Caption, value) = false) Then
				Me.OnCaptionChanging(value)
				Me.SendPropertyChanging
				Me._Caption = value
				Me.SendPropertyChanged("Caption")
				Me.OnCaptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DB_GUID", DbType:="VarChar(255)")>  _
	Public Property DB_GUID() As String
		Get
			Return Me._DB_GUID
		End Get
		Set
			If (String.Equals(Me._DB_GUID, value) = false) Then
				Me.OnDB_GUIDChanging(value)
				Me.SendPropertyChanging
				Me._DB_GUID = value
				Me.SendPropertyChanged("DB_GUID")
				Me.OnDB_GUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DB_ID", DbType:="Int")>  _
	Public Property DB_ID() As System.Nullable(Of Integer)
		Get
			Return Me._DB_ID
		End Get
		Set
			If (Me._DB_ID.Equals(value) = false) Then
				Me.OnDB_IDChanging(value)
				Me.SendPropertyChanging
				Me._DB_ID = value
				Me.SendPropertyChanged("DB_ID")
				Me.OnDB_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="VarChar(255)")>  _
	Public Property GUID() As String
		Get
			Return Me._GUID
		End Get
		Set
			If (String.Equals(Me._GUID, value) = false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class sp_ssis_eglobalResult
	
	Private _RM As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RM", DbType:="VarChar(500)")>  _
	Public Property RM() As String
		Get
			Return Me._RM
		End Get
		Set
			If (String.Equals(Me._RM, value) = false) Then
				Me._RM = value
			End If
		End Set
	End Property
End Class
