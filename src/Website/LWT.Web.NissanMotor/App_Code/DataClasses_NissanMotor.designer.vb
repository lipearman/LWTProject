'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="NissanMotor")>  _
Partial Public Class DataClasses_NissanMotorDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttblReport(instance As tblReport)
    End Sub
  Partial Private Sub UpdatetblReport(instance As tblReport)
    End Sub
  Partial Private Sub DeletetblReport(instance As tblReport)
    End Sub
  Partial Private Sub InserttblReportUser_Template(instance As tblReportUser_Template)
    End Sub
  Partial Private Sub UpdatetblReportUser_Template(instance As tblReportUser_Template)
    End Sub
  Partial Private Sub DeletetblReportUser_Template(instance As tblReportUser_Template)
    End Sub
  Partial Private Sub InserttblReport_Assignment(instance As tblReport_Assignment)
    End Sub
  Partial Private Sub UpdatetblReport_Assignment(instance As tblReport_Assignment)
    End Sub
  Partial Private Sub DeletetblReport_Assignment(instance As tblReport_Assignment)
    End Sub
  Partial Private Sub InserttblReport_DashBoard(instance As tblReport_DashBoard)
    End Sub
  Partial Private Sub UpdatetblReport_DashBoard(instance As tblReport_DashBoard)
    End Sub
  Partial Private Sub DeletetblReport_DashBoard(instance As tblReport_DashBoard)
    End Sub
  Partial Private Sub InserttblReport_MasterData(instance As tblReport_MasterData)
    End Sub
  Partial Private Sub UpdatetblReport_MasterData(instance As tblReport_MasterData)
    End Sub
  Partial Private Sub DeletetblReport_MasterData(instance As tblReport_MasterData)
    End Sub
  Partial Private Sub InserttblReport_VIEW(instance As tblReport_VIEW)
    End Sub
  Partial Private Sub UpdatetblReport_VIEW(instance As tblReport_VIEW)
    End Sub
  Partial Private Sub DeletetblReport_VIEW(instance As tblReport_VIEW)
    End Sub
  Partial Private Sub InserttblReportMaster_FilterValue(instance As tblReportMaster_FilterValue)
    End Sub
  Partial Private Sub UpdatetblReportMaster_FilterValue(instance As tblReportMaster_FilterValue)
    End Sub
  Partial Private Sub DeletetblReportMaster_FilterValue(instance As tblReportMaster_FilterValue)
    End Sub
  Partial Private Sub InserttblReportMaster_Template(instance As tblReportMaster_Template)
    End Sub
  Partial Private Sub UpdatetblReportMaster_Template(instance As tblReportMaster_Template)
    End Sub
  Partial Private Sub DeletetblReportMaster_Template(instance As tblReportMaster_Template)
    End Sub
  Partial Private Sub InserttblReportUser_FilterValue(instance As tblReportUser_FilterValue)
    End Sub
  Partial Private Sub UpdatetblReportUser_FilterValue(instance As tblReportUser_FilterValue)
    End Sub
  Partial Private Sub DeletetblReportUser_FilterValue(instance As tblReportUser_FilterValue)
    End Sub
  Partial Private Sub InserttblReport_VIEWs_Field(instance As tblReport_VIEWs_Field)
    End Sub
  Partial Private Sub UpdatetblReport_VIEWs_Field(instance As tblReport_VIEWs_Field)
    End Sub
  Partial Private Sub DeletetblReport_VIEWs_Field(instance As tblReport_VIEWs_Field)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("NissanMotorConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tblReports() As System.Data.Linq.Table(Of tblReport)
		Get
			Return Me.GetTable(Of tblReport)
		End Get
	End Property
	
	Public ReadOnly Property tblReportUser_Templates() As System.Data.Linq.Table(Of tblReportUser_Template)
		Get
			Return Me.GetTable(Of tblReportUser_Template)
		End Get
	End Property
	
	Public ReadOnly Property tblReport_Assignments() As System.Data.Linq.Table(Of tblReport_Assignment)
		Get
			Return Me.GetTable(Of tblReport_Assignment)
		End Get
	End Property
	
	Public ReadOnly Property tblReport_DashBoards() As System.Data.Linq.Table(Of tblReport_DashBoard)
		Get
			Return Me.GetTable(Of tblReport_DashBoard)
		End Get
	End Property
	
	Public ReadOnly Property tblReport_MasterDatas() As System.Data.Linq.Table(Of tblReport_MasterData)
		Get
			Return Me.GetTable(Of tblReport_MasterData)
		End Get
	End Property
	
	Public ReadOnly Property tblReport_VIEWs() As System.Data.Linq.Table(Of tblReport_VIEW)
		Get
			Return Me.GetTable(Of tblReport_VIEW)
		End Get
	End Property
	
	Public ReadOnly Property tblReportMaster_FilterValues() As System.Data.Linq.Table(Of tblReportMaster_FilterValue)
		Get
			Return Me.GetTable(Of tblReportMaster_FilterValue)
		End Get
	End Property
	
	Public ReadOnly Property tblReportMaster_Templates() As System.Data.Linq.Table(Of tblReportMaster_Template)
		Get
			Return Me.GetTable(Of tblReportMaster_Template)
		End Get
	End Property
	
	Public ReadOnly Property tblReportUser_FilterValues() As System.Data.Linq.Table(Of tblReportUser_FilterValue)
		Get
			Return Me.GetTable(Of tblReportUser_FilterValue)
		End Get
	End Property
	
	Public ReadOnly Property V_REPORT_BIs() As System.Data.Linq.Table(Of V_REPORT_BI)
		Get
			Return Me.GetTable(Of V_REPORT_BI)
		End Get
	End Property
	
	Public ReadOnly Property V_REPORT_ASSIGNMENTs() As System.Data.Linq.Table(Of V_REPORT_ASSIGNMENT)
		Get
			Return Me.GetTable(Of V_REPORT_ASSIGNMENT)
		End Get
	End Property
	
	Public ReadOnly Property tblReport_VIEWs_Fields() As System.Data.Linq.Table(Of tblReport_VIEWs_Field)
		Get
			Return Me.GetTable(Of tblReport_VIEWs_Field)
		End Get
	End Property
	
	Public ReadOnly Property V_REPORT_MASTER_TEMPLATEs() As System.Data.Linq.Table(Of V_REPORT_MASTER_TEMPLATE)
		Get
			Return Me.GetTable(Of V_REPORT_MASTER_TEMPLATE)
		End Get
	End Property
	
	Public ReadOnly Property V_REPORT_USER_TEMPLATEs() As System.Data.Linq.Table(Of V_REPORT_USER_TEMPLATE)
		Get
			Return Me.GetTable(Of V_REPORT_USER_TEMPLATE)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblReport")>  _
Partial Public Class tblReport
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RID As Integer
	
	Private _No As System.Nullable(Of Integer)
	
	Private _TITLE As String
	
	Private _DESCRIPTION As String
	
	Private _DEPARTMENT As String
	
	Private _ParentID As System.Nullable(Of Integer)
	
	Private _VIEW_ID As System.Nullable(Of Integer)
	
	Private _DB_ID As System.Nullable(Of Integer)
	
	Private _REPORT_TYPE As String
	
	Private _tblReport_Assignments As EntitySet(Of tblReport_Assignment)
	
	Private _tblReport_DashBoard As EntityRef(Of tblReport_DashBoard)
	
	Private _tblReport_VIEW As EntityRef(Of tblReport_VIEW)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRIDChanged()
    End Sub
    Partial Private Sub OnNoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNoChanged()
    End Sub
    Partial Private Sub OnTITLEChanging(value As String)
    End Sub
    Partial Private Sub OnTITLEChanged()
    End Sub
    Partial Private Sub OnDESCRIPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnDESCRIPTIONChanged()
    End Sub
    Partial Private Sub OnDEPARTMENTChanging(value As String)
    End Sub
    Partial Private Sub OnDEPARTMENTChanged()
    End Sub
    Partial Private Sub OnParentIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentIDChanged()
    End Sub
    Partial Private Sub OnVIEW_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVIEW_IDChanged()
    End Sub
    Partial Private Sub OnDB_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDB_IDChanged()
    End Sub
    Partial Private Sub OnREPORT_TYPEChanging(value As String)
    End Sub
    Partial Private Sub OnREPORT_TYPEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblReport_Assignments = New EntitySet(Of tblReport_Assignment)(AddressOf Me.attach_tblReport_Assignments, AddressOf Me.detach_tblReport_Assignments)
		Me._tblReport_DashBoard = CType(Nothing, EntityRef(Of tblReport_DashBoard))
		Me._tblReport_VIEW = CType(Nothing, EntityRef(Of tblReport_VIEW))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RID() As Integer
		Get
			Return Me._RID
		End Get
		Set
			If ((Me._RID = value)  _
						= false) Then
				Me.OnRIDChanging(value)
				Me.SendPropertyChanging
				Me._RID = value
				Me.SendPropertyChanged("RID")
				Me.OnRIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No", DbType:="Int")>  _
	Public Property No() As System.Nullable(Of Integer)
		Get
			Return Me._No
		End Get
		Set
			If (Me._No.Equals(value) = false) Then
				Me.OnNoChanging(value)
				Me.SendPropertyChanging
				Me._No = value
				Me.SendPropertyChanged("No")
				Me.OnNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TITLE", DbType:="VarChar(255)")>  _
	Public Property TITLE() As String
		Get
			Return Me._TITLE
		End Get
		Set
			If (String.Equals(Me._TITLE, value) = false) Then
				Me.OnTITLEChanging(value)
				Me.SendPropertyChanging
				Me._TITLE = value
				Me.SendPropertyChanged("TITLE")
				Me.OnTITLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPTION", DbType:="VarChar(255)")>  _
	Public Property DESCRIPTION() As String
		Get
			Return Me._DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._DESCRIPTION, value) = false) Then
				Me.OnDESCRIPTIONChanging(value)
				Me.SendPropertyChanging
				Me._DESCRIPTION = value
				Me.SendPropertyChanged("DESCRIPTION")
				Me.OnDESCRIPTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEPARTMENT", DbType:="VarChar(50)")>  _
	Public Property DEPARTMENT() As String
		Get
			Return Me._DEPARTMENT
		End Get
		Set
			If (String.Equals(Me._DEPARTMENT, value) = false) Then
				Me.OnDEPARTMENTChanging(value)
				Me.SendPropertyChanging
				Me._DEPARTMENT = value
				Me.SendPropertyChanged("DEPARTMENT")
				Me.OnDEPARTMENTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentID", DbType:="Int")>  _
	Public Property ParentID() As System.Nullable(Of Integer)
		Get
			Return Me._ParentID
		End Get
		Set
			If (Me._ParentID.Equals(value) = false) Then
				Me.OnParentIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentID = value
				Me.SendPropertyChanged("ParentID")
				Me.OnParentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VIEW_ID", DbType:="Int")>  _
	Public Property VIEW_ID() As System.Nullable(Of Integer)
		Get
			Return Me._VIEW_ID
		End Get
		Set
			If (Me._VIEW_ID.Equals(value) = false) Then
				If Me._tblReport_VIEW.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVIEW_IDChanging(value)
				Me.SendPropertyChanging
				Me._VIEW_ID = value
				Me.SendPropertyChanged("VIEW_ID")
				Me.OnVIEW_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DB_ID", DbType:="Int")>  _
	Public Property DB_ID() As System.Nullable(Of Integer)
		Get
			Return Me._DB_ID
		End Get
		Set
			If (Me._DB_ID.Equals(value) = false) Then
				If Me._tblReport_DashBoard.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDB_IDChanging(value)
				Me.SendPropertyChanging
				Me._DB_ID = value
				Me.SendPropertyChanged("DB_ID")
				Me.OnDB_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REPORT_TYPE", DbType:="VarChar(50)")>  _
	Public Property REPORT_TYPE() As String
		Get
			Return Me._REPORT_TYPE
		End Get
		Set
			If (String.Equals(Me._REPORT_TYPE, value) = false) Then
				Me.OnREPORT_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._REPORT_TYPE = value
				Me.SendPropertyChanged("REPORT_TYPE")
				Me.OnREPORT_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReport_tblReport_Assignment", Storage:="_tblReport_Assignments", ThisKey:="RID", OtherKey:="RID")>  _
	Public Property tblReport_Assignments() As EntitySet(Of tblReport_Assignment)
		Get
			Return Me._tblReport_Assignments
		End Get
		Set
			Me._tblReport_Assignments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReport_DashBoard_tblReport", Storage:="_tblReport_DashBoard", ThisKey:="DB_ID", OtherKey:="DB_ID", IsForeignKey:=true)>  _
	Public Property tblReport_DashBoard() As tblReport_DashBoard
		Get
			Return Me._tblReport_DashBoard.Entity
		End Get
		Set
			Dim previousValue As tblReport_DashBoard = Me._tblReport_DashBoard.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblReport_DashBoard.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblReport_DashBoard.Entity = Nothing
					previousValue.tblReports.Remove(Me)
				End If
				Me._tblReport_DashBoard.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblReports.Add(Me)
					Me._DB_ID = value.DB_ID
				Else
					Me._DB_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblReport_DashBoard")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReport_VIEW_tblReport", Storage:="_tblReport_VIEW", ThisKey:="VIEW_ID", OtherKey:="VIEW_ID", IsForeignKey:=true)>  _
	Public Property tblReport_VIEW() As tblReport_VIEW
		Get
			Return Me._tblReport_VIEW.Entity
		End Get
		Set
			Dim previousValue As tblReport_VIEW = Me._tblReport_VIEW.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblReport_VIEW.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblReport_VIEW.Entity = Nothing
					previousValue.tblReports.Remove(Me)
				End If
				Me._tblReport_VIEW.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblReports.Add(Me)
					Me._VIEW_ID = value.VIEW_ID
				Else
					Me._VIEW_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblReport_VIEW")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblReport_Assignments(ByVal entity As tblReport_Assignment)
		Me.SendPropertyChanging
		entity.tblReport = Me
	End Sub
	
	Private Sub detach_tblReport_Assignments(ByVal entity As tblReport_Assignment)
		Me.SendPropertyChanging
		entity.tblReport = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblReportUser_Template")>  _
Partial Public Class tblReportUser_Template
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _RID As Integer
	
	Private _FIELD_ID As Integer
	
	Private _AREA As Integer
	
	Private _OWNER As String
	
	Private _ORDERBY As System.Nullable(Of Integer)
	
	Private _tblReportUser_FilterValues As EntitySet(Of tblReportUser_FilterValue)
	
	Private _tblReport_VIEWs_Field As EntityRef(Of tblReport_VIEWs_Field)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnRIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRIDChanged()
    End Sub
    Partial Private Sub OnFIELD_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFIELD_IDChanged()
    End Sub
    Partial Private Sub OnAREAChanging(value As Integer)
    End Sub
    Partial Private Sub OnAREAChanged()
    End Sub
    Partial Private Sub OnOWNERChanging(value As String)
    End Sub
    Partial Private Sub OnOWNERChanged()
    End Sub
    Partial Private Sub OnORDERBYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDERBYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblReportUser_FilterValues = New EntitySet(Of tblReportUser_FilterValue)(AddressOf Me.attach_tblReportUser_FilterValues, AddressOf Me.detach_tblReportUser_FilterValues)
		Me._tblReport_VIEWs_Field = CType(Nothing, EntityRef(Of tblReport_VIEWs_Field))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", DbType:="Int NOT NULL")>  _
	Public Property RID() As Integer
		Get
			Return Me._RID
		End Get
		Set
			If ((Me._RID = value)  _
						= false) Then
				Me.OnRIDChanging(value)
				Me.SendPropertyChanging
				Me._RID = value
				Me.SendPropertyChanged("RID")
				Me.OnRIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD_ID", DbType:="Int NOT NULL")>  _
	Public Property FIELD_ID() As Integer
		Get
			Return Me._FIELD_ID
		End Get
		Set
			If ((Me._FIELD_ID = value)  _
						= false) Then
				If Me._tblReport_VIEWs_Field.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFIELD_IDChanging(value)
				Me.SendPropertyChanging
				Me._FIELD_ID = value
				Me.SendPropertyChanged("FIELD_ID")
				Me.OnFIELD_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREA", DbType:="Int NOT NULL")>  _
	Public Property AREA() As Integer
		Get
			Return Me._AREA
		End Get
		Set
			If ((Me._AREA = value)  _
						= false) Then
				Me.OnAREAChanging(value)
				Me.SendPropertyChanging
				Me._AREA = value
				Me.SendPropertyChanged("AREA")
				Me.OnAREAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OWNER", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property OWNER() As String
		Get
			Return Me._OWNER
		End Get
		Set
			If (String.Equals(Me._OWNER, value) = false) Then
				Me.OnOWNERChanging(value)
				Me.SendPropertyChanging
				Me._OWNER = value
				Me.SendPropertyChanged("OWNER")
				Me.OnOWNERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDERBY", DbType:="Int")>  _
	Public Property ORDERBY() As System.Nullable(Of Integer)
		Get
			Return Me._ORDERBY
		End Get
		Set
			If (Me._ORDERBY.Equals(value) = false) Then
				Me.OnORDERBYChanging(value)
				Me.SendPropertyChanging
				Me._ORDERBY = value
				Me.SendPropertyChanged("ORDERBY")
				Me.OnORDERBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReportUser_Template_tblReportUser_FilterValue", Storage:="_tblReportUser_FilterValues", ThisKey:="ID", OtherKey:="ID")>  _
	Public Property tblReportUser_FilterValues() As EntitySet(Of tblReportUser_FilterValue)
		Get
			Return Me._tblReportUser_FilterValues
		End Get
		Set
			Me._tblReportUser_FilterValues.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReport_VIEWs_Field_tblReportUser_Template", Storage:="_tblReport_VIEWs_Field", ThisKey:="FIELD_ID", OtherKey:="FIELD_ID", IsForeignKey:=true)>  _
	Public Property tblReport_VIEWs_Field() As tblReport_VIEWs_Field
		Get
			Return Me._tblReport_VIEWs_Field.Entity
		End Get
		Set
			Dim previousValue As tblReport_VIEWs_Field = Me._tblReport_VIEWs_Field.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblReport_VIEWs_Field.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblReport_VIEWs_Field.Entity = Nothing
					previousValue.tblReportUser_Templates.Remove(Me)
				End If
				Me._tblReport_VIEWs_Field.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblReportUser_Templates.Add(Me)
					Me._FIELD_ID = value.FIELD_ID
				Else
					Me._FIELD_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblReport_VIEWs_Field")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblReportUser_FilterValues(ByVal entity As tblReportUser_FilterValue)
		Me.SendPropertyChanging
		entity.tblReportUser_Template = Me
	End Sub
	
	Private Sub detach_tblReportUser_FilterValues(ByVal entity As tblReportUser_FilterValue)
		Me.SendPropertyChanging
		entity.tblReportUser_Template = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblReport_Assignment")>  _
Partial Public Class tblReport_Assignment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _RID As Integer
	
	Private _UserName As String
	
	Private _tblReport As EntityRef(Of tblReport)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnRIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblReport = CType(Nothing, EntityRef(Of tblReport))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RID() As Integer
		Get
			Return Me._RID
		End Get
		Set
			If ((Me._RID = value)  _
						= false) Then
				If Me._tblReport.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRIDChanging(value)
				Me.SendPropertyChanging
				Me._RID = value
				Me.SendPropertyChanged("RID")
				Me.OnRIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReport_tblReport_Assignment", Storage:="_tblReport", ThisKey:="RID", OtherKey:="RID", IsForeignKey:=true)>  _
	Public Property tblReport() As tblReport
		Get
			Return Me._tblReport.Entity
		End Get
		Set
			Dim previousValue As tblReport = Me._tblReport.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblReport.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblReport.Entity = Nothing
					previousValue.tblReport_Assignments.Remove(Me)
				End If
				Me._tblReport.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblReport_Assignments.Add(Me)
					Me._RID = value.RID
				Else
					Me._RID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblReport")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblReport_DashBoard")>  _
Partial Public Class tblReport_DashBoard
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DB_ID As Integer
	
	Private _DB_TITLE As String
	
	Private _DB_XML As String
	
	Private _VIEW_ID As System.Nullable(Of Integer)
	
	Private _tblReports As EntitySet(Of tblReport)
	
	Private _tblReport_VIEW As EntityRef(Of tblReport_VIEW)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDB_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDB_IDChanged()
    End Sub
    Partial Private Sub OnDB_TITLEChanging(value As String)
    End Sub
    Partial Private Sub OnDB_TITLEChanged()
    End Sub
    Partial Private Sub OnDB_XMLChanging(value As String)
    End Sub
    Partial Private Sub OnDB_XMLChanged()
    End Sub
    Partial Private Sub OnVIEW_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVIEW_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblReports = New EntitySet(Of tblReport)(AddressOf Me.attach_tblReports, AddressOf Me.detach_tblReports)
		Me._tblReport_VIEW = CType(Nothing, EntityRef(Of tblReport_VIEW))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DB_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DB_ID() As Integer
		Get
			Return Me._DB_ID
		End Get
		Set
			If ((Me._DB_ID = value)  _
						= false) Then
				Me.OnDB_IDChanging(value)
				Me.SendPropertyChanging
				Me._DB_ID = value
				Me.SendPropertyChanged("DB_ID")
				Me.OnDB_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DB_TITLE", DbType:="VarChar(255)")>  _
	Public Property DB_TITLE() As String
		Get
			Return Me._DB_TITLE
		End Get
		Set
			If (String.Equals(Me._DB_TITLE, value) = false) Then
				Me.OnDB_TITLEChanging(value)
				Me.SendPropertyChanging
				Me._DB_TITLE = value
				Me.SendPropertyChanged("DB_TITLE")
				Me.OnDB_TITLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DB_XML", DbType:="VarChar(255)")>  _
	Public Property DB_XML() As String
		Get
			Return Me._DB_XML
		End Get
		Set
			If (String.Equals(Me._DB_XML, value) = false) Then
				Me.OnDB_XMLChanging(value)
				Me.SendPropertyChanging
				Me._DB_XML = value
				Me.SendPropertyChanged("DB_XML")
				Me.OnDB_XMLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VIEW_ID", DbType:="Int")>  _
	Public Property VIEW_ID() As System.Nullable(Of Integer)
		Get
			Return Me._VIEW_ID
		End Get
		Set
			If (Me._VIEW_ID.Equals(value) = false) Then
				If Me._tblReport_VIEW.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVIEW_IDChanging(value)
				Me.SendPropertyChanging
				Me._VIEW_ID = value
				Me.SendPropertyChanged("VIEW_ID")
				Me.OnVIEW_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReport_DashBoard_tblReport", Storage:="_tblReports", ThisKey:="DB_ID", OtherKey:="DB_ID")>  _
	Public Property tblReports() As EntitySet(Of tblReport)
		Get
			Return Me._tblReports
		End Get
		Set
			Me._tblReports.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReport_VIEW_tblReport_DashBoard", Storage:="_tblReport_VIEW", ThisKey:="VIEW_ID", OtherKey:="VIEW_ID", IsForeignKey:=true)>  _
	Public Property tblReport_VIEW() As tblReport_VIEW
		Get
			Return Me._tblReport_VIEW.Entity
		End Get
		Set
			Dim previousValue As tblReport_VIEW = Me._tblReport_VIEW.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblReport_VIEW.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblReport_VIEW.Entity = Nothing
					previousValue.tblReport_DashBoards.Remove(Me)
				End If
				Me._tblReport_VIEW.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblReport_DashBoards.Add(Me)
					Me._VIEW_ID = value.VIEW_ID
				Else
					Me._VIEW_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblReport_VIEW")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblReports(ByVal entity As tblReport)
		Me.SendPropertyChanging
		entity.tblReport_DashBoard = Me
	End Sub
	
	Private Sub detach_tblReports(ByVal entity As tblReport)
		Me.SendPropertyChanging
		entity.tblReport_DashBoard = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblReport_MasterData")>  _
Partial Public Class tblReport_MasterData
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _Value As System.Nullable(Of Integer)
	
	Private _GroupName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnGroupNameChanging(value As String)
    End Sub
    Partial Private Sub OnGroupNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Int")>  _
	Public Property Value() As System.Nullable(Of Integer)
		Get
			Return Me._Value
		End Get
		Set
			If (Me._Value.Equals(value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupName", DbType:="VarChar(50)")>  _
	Public Property GroupName() As String
		Get
			Return Me._GroupName
		End Get
		Set
			If (String.Equals(Me._GroupName, value) = false) Then
				Me.OnGroupNameChanging(value)
				Me.SendPropertyChanging
				Me._GroupName = value
				Me.SendPropertyChanged("GroupName")
				Me.OnGroupNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblReport_VIEWs")>  _
Partial Public Class tblReport_VIEW
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _VIEW_ID As Integer
	
	Private _VIEW_TITLE As String
	
	Private _VIEW_QUERY As String
	
	Private _VIEW_CONNECTION As String
	
	Private _Department As String
	
	Private _BIFile As String
	
	Private _tblReports As EntitySet(Of tblReport)
	
	Private _tblReport_DashBoards As EntitySet(Of tblReport_DashBoard)
	
	Private _tblReport_VIEWs_Fields As EntitySet(Of tblReport_VIEWs_Field)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnVIEW_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVIEW_IDChanged()
    End Sub
    Partial Private Sub OnVIEW_TITLEChanging(value As String)
    End Sub
    Partial Private Sub OnVIEW_TITLEChanged()
    End Sub
    Partial Private Sub OnVIEW_QUERYChanging(value As String)
    End Sub
    Partial Private Sub OnVIEW_QUERYChanged()
    End Sub
    Partial Private Sub OnVIEW_CONNECTIONChanging(value As String)
    End Sub
    Partial Private Sub OnVIEW_CONNECTIONChanged()
    End Sub
    Partial Private Sub OnDepartmentChanging(value As String)
    End Sub
    Partial Private Sub OnDepartmentChanged()
    End Sub
    Partial Private Sub OnBIFileChanging(value As String)
    End Sub
    Partial Private Sub OnBIFileChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblReports = New EntitySet(Of tblReport)(AddressOf Me.attach_tblReports, AddressOf Me.detach_tblReports)
		Me._tblReport_DashBoards = New EntitySet(Of tblReport_DashBoard)(AddressOf Me.attach_tblReport_DashBoards, AddressOf Me.detach_tblReport_DashBoards)
		Me._tblReport_VIEWs_Fields = New EntitySet(Of tblReport_VIEWs_Field)(AddressOf Me.attach_tblReport_VIEWs_Fields, AddressOf Me.detach_tblReport_VIEWs_Fields)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VIEW_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property VIEW_ID() As Integer
		Get
			Return Me._VIEW_ID
		End Get
		Set
			If ((Me._VIEW_ID = value)  _
						= false) Then
				Me.OnVIEW_IDChanging(value)
				Me.SendPropertyChanging
				Me._VIEW_ID = value
				Me.SendPropertyChanged("VIEW_ID")
				Me.OnVIEW_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VIEW_TITLE", DbType:="VarChar(255)")>  _
	Public Property VIEW_TITLE() As String
		Get
			Return Me._VIEW_TITLE
		End Get
		Set
			If (String.Equals(Me._VIEW_TITLE, value) = false) Then
				Me.OnVIEW_TITLEChanging(value)
				Me.SendPropertyChanging
				Me._VIEW_TITLE = value
				Me.SendPropertyChanged("VIEW_TITLE")
				Me.OnVIEW_TITLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VIEW_QUERY", DbType:="VarChar(255)")>  _
	Public Property VIEW_QUERY() As String
		Get
			Return Me._VIEW_QUERY
		End Get
		Set
			If (String.Equals(Me._VIEW_QUERY, value) = false) Then
				Me.OnVIEW_QUERYChanging(value)
				Me.SendPropertyChanging
				Me._VIEW_QUERY = value
				Me.SendPropertyChanged("VIEW_QUERY")
				Me.OnVIEW_QUERYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VIEW_CONNECTION", DbType:="VarChar(255)")>  _
	Public Property VIEW_CONNECTION() As String
		Get
			Return Me._VIEW_CONNECTION
		End Get
		Set
			If (String.Equals(Me._VIEW_CONNECTION, value) = false) Then
				Me.OnVIEW_CONNECTIONChanging(value)
				Me.SendPropertyChanging
				Me._VIEW_CONNECTION = value
				Me.SendPropertyChanged("VIEW_CONNECTION")
				Me.OnVIEW_CONNECTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Department", DbType:="VarChar(50)")>  _
	Public Property Department() As String
		Get
			Return Me._Department
		End Get
		Set
			If (String.Equals(Me._Department, value) = false) Then
				Me.OnDepartmentChanging(value)
				Me.SendPropertyChanging
				Me._Department = value
				Me.SendPropertyChanged("Department")
				Me.OnDepartmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BIFile", DbType:="VarChar(255)")>  _
	Public Property BIFile() As String
		Get
			Return Me._BIFile
		End Get
		Set
			If (String.Equals(Me._BIFile, value) = false) Then
				Me.OnBIFileChanging(value)
				Me.SendPropertyChanging
				Me._BIFile = value
				Me.SendPropertyChanged("BIFile")
				Me.OnBIFileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReport_VIEW_tblReport", Storage:="_tblReports", ThisKey:="VIEW_ID", OtherKey:="VIEW_ID")>  _
	Public Property tblReports() As EntitySet(Of tblReport)
		Get
			Return Me._tblReports
		End Get
		Set
			Me._tblReports.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReport_VIEW_tblReport_DashBoard", Storage:="_tblReport_DashBoards", ThisKey:="VIEW_ID", OtherKey:="VIEW_ID")>  _
	Public Property tblReport_DashBoards() As EntitySet(Of tblReport_DashBoard)
		Get
			Return Me._tblReport_DashBoards
		End Get
		Set
			Me._tblReport_DashBoards.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReport_VIEW_tblReport_VIEWs_Field", Storage:="_tblReport_VIEWs_Fields", ThisKey:="VIEW_ID", OtherKey:="VIEW_ID")>  _
	Public Property tblReport_VIEWs_Fields() As EntitySet(Of tblReport_VIEWs_Field)
		Get
			Return Me._tblReport_VIEWs_Fields
		End Get
		Set
			Me._tblReport_VIEWs_Fields.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblReports(ByVal entity As tblReport)
		Me.SendPropertyChanging
		entity.tblReport_VIEW = Me
	End Sub
	
	Private Sub detach_tblReports(ByVal entity As tblReport)
		Me.SendPropertyChanging
		entity.tblReport_VIEW = Nothing
	End Sub
	
	Private Sub attach_tblReport_DashBoards(ByVal entity As tblReport_DashBoard)
		Me.SendPropertyChanging
		entity.tblReport_VIEW = Me
	End Sub
	
	Private Sub detach_tblReport_DashBoards(ByVal entity As tblReport_DashBoard)
		Me.SendPropertyChanging
		entity.tblReport_VIEW = Nothing
	End Sub
	
	Private Sub attach_tblReport_VIEWs_Fields(ByVal entity As tblReport_VIEWs_Field)
		Me.SendPropertyChanging
		entity.tblReport_VIEW = Me
	End Sub
	
	Private Sub detach_tblReport_VIEWs_Fields(ByVal entity As tblReport_VIEWs_Field)
		Me.SendPropertyChanging
		entity.tblReport_VIEW = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblReportMaster_FilterValues")>  _
Partial Public Class tblReportMaster_FilterValue
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FILTER_ID As Integer
	
	Private _FILTER_VALUE As String
	
	Private _FILTER_TYPE As String
	
	Private _MASTER_ID As System.Nullable(Of Integer)
	
	Private _tblReportMaster_Template As EntityRef(Of tblReportMaster_Template)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFILTER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFILTER_IDChanged()
    End Sub
    Partial Private Sub OnFILTER_VALUEChanging(value As String)
    End Sub
    Partial Private Sub OnFILTER_VALUEChanged()
    End Sub
    Partial Private Sub OnFILTER_TYPEChanging(value As String)
    End Sub
    Partial Private Sub OnFILTER_TYPEChanged()
    End Sub
    Partial Private Sub OnMASTER_IDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMASTER_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblReportMaster_Template = CType(Nothing, EntityRef(Of tblReportMaster_Template))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILTER_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property FILTER_ID() As Integer
		Get
			Return Me._FILTER_ID
		End Get
		Set
			If ((Me._FILTER_ID = value)  _
						= false) Then
				Me.OnFILTER_IDChanging(value)
				Me.SendPropertyChanging
				Me._FILTER_ID = value
				Me.SendPropertyChanged("FILTER_ID")
				Me.OnFILTER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILTER_VALUE", DbType:="VarChar(255)")>  _
	Public Property FILTER_VALUE() As String
		Get
			Return Me._FILTER_VALUE
		End Get
		Set
			If (String.Equals(Me._FILTER_VALUE, value) = false) Then
				Me.OnFILTER_VALUEChanging(value)
				Me.SendPropertyChanging
				Me._FILTER_VALUE = value
				Me.SendPropertyChanged("FILTER_VALUE")
				Me.OnFILTER_VALUEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILTER_TYPE", DbType:="VarChar(50)")>  _
	Public Property FILTER_TYPE() As String
		Get
			Return Me._FILTER_TYPE
		End Get
		Set
			If (String.Equals(Me._FILTER_TYPE, value) = false) Then
				Me.OnFILTER_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._FILTER_TYPE = value
				Me.SendPropertyChanged("FILTER_TYPE")
				Me.OnFILTER_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MASTER_ID", DbType:="Int")>  _
	Public Property MASTER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._MASTER_ID
		End Get
		Set
			If (Me._MASTER_ID.Equals(value) = false) Then
				If Me._tblReportMaster_Template.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMASTER_IDChanging(value)
				Me.SendPropertyChanging
				Me._MASTER_ID = value
				Me.SendPropertyChanged("MASTER_ID")
				Me.OnMASTER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReportMaster_Template_tblReportMaster_FilterValue", Storage:="_tblReportMaster_Template", ThisKey:="MASTER_ID", OtherKey:="MASTER_ID", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property tblReportMaster_Template() As tblReportMaster_Template
		Get
			Return Me._tblReportMaster_Template.Entity
		End Get
		Set
			Dim previousValue As tblReportMaster_Template = Me._tblReportMaster_Template.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblReportMaster_Template.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblReportMaster_Template.Entity = Nothing
					previousValue.tblReportMaster_FilterValues.Remove(Me)
				End If
				Me._tblReportMaster_Template.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblReportMaster_FilterValues.Add(Me)
					Me._MASTER_ID = value.MASTER_ID
				Else
					Me._MASTER_ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblReportMaster_Template")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblReportMaster_Template")>  _
Partial Public Class tblReportMaster_Template
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MASTER_ID As Integer
	
	Private _RID As Integer
	
	Private _FIELD_ID As Integer
	
	Private _AREA As System.Nullable(Of Integer)
	
	Private _ORDERBY As System.Nullable(Of Integer)
	
	Private _tblReportMaster_FilterValues As EntitySet(Of tblReportMaster_FilterValue)
	
	Private _tblReport_VIEWs_Field As EntityRef(Of tblReport_VIEWs_Field)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMASTER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMASTER_IDChanged()
    End Sub
    Partial Private Sub OnRIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRIDChanged()
    End Sub
    Partial Private Sub OnFIELD_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFIELD_IDChanged()
    End Sub
    Partial Private Sub OnAREAChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAREAChanged()
    End Sub
    Partial Private Sub OnORDERBYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnORDERBYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblReportMaster_FilterValues = New EntitySet(Of tblReportMaster_FilterValue)(AddressOf Me.attach_tblReportMaster_FilterValues, AddressOf Me.detach_tblReportMaster_FilterValues)
		Me._tblReport_VIEWs_Field = CType(Nothing, EntityRef(Of tblReport_VIEWs_Field))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MASTER_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property MASTER_ID() As Integer
		Get
			Return Me._MASTER_ID
		End Get
		Set
			If ((Me._MASTER_ID = value)  _
						= false) Then
				Me.OnMASTER_IDChanging(value)
				Me.SendPropertyChanging
				Me._MASTER_ID = value
				Me.SendPropertyChanged("MASTER_ID")
				Me.OnMASTER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", DbType:="Int NOT NULL")>  _
	Public Property RID() As Integer
		Get
			Return Me._RID
		End Get
		Set
			If ((Me._RID = value)  _
						= false) Then
				Me.OnRIDChanging(value)
				Me.SendPropertyChanging
				Me._RID = value
				Me.SendPropertyChanged("RID")
				Me.OnRIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD_ID", DbType:="Int NOT NULL")>  _
	Public Property FIELD_ID() As Integer
		Get
			Return Me._FIELD_ID
		End Get
		Set
			If ((Me._FIELD_ID = value)  _
						= false) Then
				If Me._tblReport_VIEWs_Field.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFIELD_IDChanging(value)
				Me.SendPropertyChanging
				Me._FIELD_ID = value
				Me.SendPropertyChanged("FIELD_ID")
				Me.OnFIELD_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREA", DbType:="Int")>  _
	Public Property AREA() As System.Nullable(Of Integer)
		Get
			Return Me._AREA
		End Get
		Set
			If (Me._AREA.Equals(value) = false) Then
				Me.OnAREAChanging(value)
				Me.SendPropertyChanging
				Me._AREA = value
				Me.SendPropertyChanged("AREA")
				Me.OnAREAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDERBY", DbType:="Int")>  _
	Public Property ORDERBY() As System.Nullable(Of Integer)
		Get
			Return Me._ORDERBY
		End Get
		Set
			If (Me._ORDERBY.Equals(value) = false) Then
				Me.OnORDERBYChanging(value)
				Me.SendPropertyChanging
				Me._ORDERBY = value
				Me.SendPropertyChanged("ORDERBY")
				Me.OnORDERBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReportMaster_Template_tblReportMaster_FilterValue", Storage:="_tblReportMaster_FilterValues", ThisKey:="MASTER_ID", OtherKey:="MASTER_ID")>  _
	Public Property tblReportMaster_FilterValues() As EntitySet(Of tblReportMaster_FilterValue)
		Get
			Return Me._tblReportMaster_FilterValues
		End Get
		Set
			Me._tblReportMaster_FilterValues.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReport_VIEWs_Field_tblReportMaster_Template", Storage:="_tblReport_VIEWs_Field", ThisKey:="FIELD_ID", OtherKey:="FIELD_ID", IsForeignKey:=true)>  _
	Public Property tblReport_VIEWs_Field() As tblReport_VIEWs_Field
		Get
			Return Me._tblReport_VIEWs_Field.Entity
		End Get
		Set
			Dim previousValue As tblReport_VIEWs_Field = Me._tblReport_VIEWs_Field.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblReport_VIEWs_Field.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblReport_VIEWs_Field.Entity = Nothing
					previousValue.tblReportMaster_Templates.Remove(Me)
				End If
				Me._tblReport_VIEWs_Field.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblReportMaster_Templates.Add(Me)
					Me._FIELD_ID = value.FIELD_ID
				Else
					Me._FIELD_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblReport_VIEWs_Field")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblReportMaster_FilterValues(ByVal entity As tblReportMaster_FilterValue)
		Me.SendPropertyChanging
		entity.tblReportMaster_Template = Me
	End Sub
	
	Private Sub detach_tblReportMaster_FilterValues(ByVal entity As tblReportMaster_FilterValue)
		Me.SendPropertyChanging
		entity.tblReportMaster_Template = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblReportUser_FilterValues")>  _
Partial Public Class tblReportUser_FilterValue
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FILTER_ID As Integer
	
	Private _FILTER_VALUE As String
	
	Private _FILTER_TYPE As String
	
	Private _ID As System.Nullable(Of Integer)
	
	Private _tblReportUser_Template As EntityRef(Of tblReportUser_Template)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFILTER_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFILTER_IDChanged()
    End Sub
    Partial Private Sub OnFILTER_VALUEChanging(value As String)
    End Sub
    Partial Private Sub OnFILTER_VALUEChanged()
    End Sub
    Partial Private Sub OnFILTER_TYPEChanging(value As String)
    End Sub
    Partial Private Sub OnFILTER_TYPEChanged()
    End Sub
    Partial Private Sub OnIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblReportUser_Template = CType(Nothing, EntityRef(Of tblReportUser_Template))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILTER_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property FILTER_ID() As Integer
		Get
			Return Me._FILTER_ID
		End Get
		Set
			If ((Me._FILTER_ID = value)  _
						= false) Then
				Me.OnFILTER_IDChanging(value)
				Me.SendPropertyChanging
				Me._FILTER_ID = value
				Me.SendPropertyChanged("FILTER_ID")
				Me.OnFILTER_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILTER_VALUE", DbType:="VarChar(255)")>  _
	Public Property FILTER_VALUE() As String
		Get
			Return Me._FILTER_VALUE
		End Get
		Set
			If (String.Equals(Me._FILTER_VALUE, value) = false) Then
				Me.OnFILTER_VALUEChanging(value)
				Me.SendPropertyChanging
				Me._FILTER_VALUE = value
				Me.SendPropertyChanged("FILTER_VALUE")
				Me.OnFILTER_VALUEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FILTER_TYPE", DbType:="VarChar(50)")>  _
	Public Property FILTER_TYPE() As String
		Get
			Return Me._FILTER_TYPE
		End Get
		Set
			If (String.Equals(Me._FILTER_TYPE, value) = false) Then
				Me.OnFILTER_TYPEChanging(value)
				Me.SendPropertyChanging
				Me._FILTER_TYPE = value
				Me.SendPropertyChanged("FILTER_TYPE")
				Me.OnFILTER_TYPEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int")>  _
	Public Property ID() As System.Nullable(Of Integer)
		Get
			Return Me._ID
		End Get
		Set
			If (Me._ID.Equals(value) = false) Then
				If Me._tblReportUser_Template.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReportUser_Template_tblReportUser_FilterValue", Storage:="_tblReportUser_Template", ThisKey:="ID", OtherKey:="ID", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property tblReportUser_Template() As tblReportUser_Template
		Get
			Return Me._tblReportUser_Template.Entity
		End Get
		Set
			Dim previousValue As tblReportUser_Template = Me._tblReportUser_Template.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblReportUser_Template.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblReportUser_Template.Entity = Nothing
					previousValue.tblReportUser_FilterValues.Remove(Me)
				End If
				Me._tblReportUser_Template.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblReportUser_FilterValues.Add(Me)
					Me._ID = value.ID
				Else
					Me._ID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tblReportUser_Template")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_REPORT_BI")>  _
Partial Public Class V_REPORT_BI
	
	Private _RID As Integer
	
	Private _No As System.Nullable(Of Integer)
	
	Private _TITLE As String
	
	Private _DESCRIPTION As String
	
	Private _DEPARTMENT As String
	
	Private _ParentID As System.Nullable(Of Integer)
	
	Private _REPORT_TYPE As String
	
	Private _VIEW_TITLE As String
	
	Private _VIEW_QUERY As String
	
	Private _VIEW_CONNECTION As String
	
	Private _BIFile As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", DbType:="Int NOT NULL")>  _
	Public Property RID() As Integer
		Get
			Return Me._RID
		End Get
		Set
			If ((Me._RID = value)  _
						= false) Then
				Me._RID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No", DbType:="Int")>  _
	Public Property No() As System.Nullable(Of Integer)
		Get
			Return Me._No
		End Get
		Set
			If (Me._No.Equals(value) = false) Then
				Me._No = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TITLE", DbType:="VarChar(255)")>  _
	Public Property TITLE() As String
		Get
			Return Me._TITLE
		End Get
		Set
			If (String.Equals(Me._TITLE, value) = false) Then
				Me._TITLE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPTION", DbType:="VarChar(255)")>  _
	Public Property DESCRIPTION() As String
		Get
			Return Me._DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._DESCRIPTION, value) = false) Then
				Me._DESCRIPTION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEPARTMENT", DbType:="VarChar(50)")>  _
	Public Property DEPARTMENT() As String
		Get
			Return Me._DEPARTMENT
		End Get
		Set
			If (String.Equals(Me._DEPARTMENT, value) = false) Then
				Me._DEPARTMENT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentID", DbType:="Int")>  _
	Public Property ParentID() As System.Nullable(Of Integer)
		Get
			Return Me._ParentID
		End Get
		Set
			If (Me._ParentID.Equals(value) = false) Then
				Me._ParentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REPORT_TYPE", DbType:="VarChar(50)")>  _
	Public Property REPORT_TYPE() As String
		Get
			Return Me._REPORT_TYPE
		End Get
		Set
			If (String.Equals(Me._REPORT_TYPE, value) = false) Then
				Me._REPORT_TYPE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VIEW_TITLE", DbType:="VarChar(255)")>  _
	Public Property VIEW_TITLE() As String
		Get
			Return Me._VIEW_TITLE
		End Get
		Set
			If (String.Equals(Me._VIEW_TITLE, value) = false) Then
				Me._VIEW_TITLE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VIEW_QUERY", DbType:="VarChar(255)")>  _
	Public Property VIEW_QUERY() As String
		Get
			Return Me._VIEW_QUERY
		End Get
		Set
			If (String.Equals(Me._VIEW_QUERY, value) = false) Then
				Me._VIEW_QUERY = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VIEW_CONNECTION", DbType:="VarChar(255)")>  _
	Public Property VIEW_CONNECTION() As String
		Get
			Return Me._VIEW_CONNECTION
		End Get
		Set
			If (String.Equals(Me._VIEW_CONNECTION, value) = false) Then
				Me._VIEW_CONNECTION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BIFile", DbType:="VarChar(255)")>  _
	Public Property BIFile() As String
		Get
			Return Me._BIFile
		End Get
		Set
			If (String.Equals(Me._BIFile, value) = false) Then
				Me._BIFile = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_REPORT_ASSIGNMENT")>  _
Partial Public Class V_REPORT_ASSIGNMENT
	
	Private _RID As Integer
	
	Private _No As System.Nullable(Of Integer)
	
	Private _TITLE As String
	
	Private _DESCRIPTION As String
	
	Private _DEPARTMENT As String
	
	Private _ParentID As System.Nullable(Of Integer)
	
	Private _VIEW_ID As System.Nullable(Of Integer)
	
	Private _DB_ID As System.Nullable(Of Integer)
	
	Private _REPORT_TYPE As String
	
	Private _UserName As String
	
	Private _SelectNode As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", DbType:="Int NOT NULL")>  _
	Public Property RID() As Integer
		Get
			Return Me._RID
		End Get
		Set
			If ((Me._RID = value)  _
						= false) Then
				Me._RID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_No", DbType:="Int")>  _
	Public Property No() As System.Nullable(Of Integer)
		Get
			Return Me._No
		End Get
		Set
			If (Me._No.Equals(value) = false) Then
				Me._No = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TITLE", DbType:="VarChar(255)")>  _
	Public Property TITLE() As String
		Get
			Return Me._TITLE
		End Get
		Set
			If (String.Equals(Me._TITLE, value) = false) Then
				Me._TITLE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DESCRIPTION", DbType:="VarChar(255)")>  _
	Public Property DESCRIPTION() As String
		Get
			Return Me._DESCRIPTION
		End Get
		Set
			If (String.Equals(Me._DESCRIPTION, value) = false) Then
				Me._DESCRIPTION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEPARTMENT", DbType:="VarChar(50)")>  _
	Public Property DEPARTMENT() As String
		Get
			Return Me._DEPARTMENT
		End Get
		Set
			If (String.Equals(Me._DEPARTMENT, value) = false) Then
				Me._DEPARTMENT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentID", DbType:="Int")>  _
	Public Property ParentID() As System.Nullable(Of Integer)
		Get
			Return Me._ParentID
		End Get
		Set
			If (Me._ParentID.Equals(value) = false) Then
				Me._ParentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VIEW_ID", DbType:="Int")>  _
	Public Property VIEW_ID() As System.Nullable(Of Integer)
		Get
			Return Me._VIEW_ID
		End Get
		Set
			If (Me._VIEW_ID.Equals(value) = false) Then
				Me._VIEW_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DB_ID", DbType:="Int")>  _
	Public Property DB_ID() As System.Nullable(Of Integer)
		Get
			Return Me._DB_ID
		End Get
		Set
			If (Me._DB_ID.Equals(value) = false) Then
				Me._DB_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REPORT_TYPE", DbType:="VarChar(50)")>  _
	Public Property REPORT_TYPE() As String
		Get
			Return Me._REPORT_TYPE
		End Get
		Set
			If (String.Equals(Me._REPORT_TYPE, value) = false) Then
				Me._REPORT_TYPE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="VarChar(50)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me._UserName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SelectNode", DbType:="Int")>  _
	Public Property SelectNode() As System.Nullable(Of Integer)
		Get
			Return Me._SelectNode
		End Get
		Set
			If (Me._SelectNode.Equals(value) = false) Then
				Me._SelectNode = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblReport_VIEWs_Field")>  _
Partial Public Class tblReport_VIEWs_Field
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FIELD_ID As Integer
	
	Private _FIELD_CAPTION As String
	
	Private _FIELD_NAME As String
	
	Private _SummaryType As System.Nullable(Of Integer)
	
	Private _CellFormat_FormatType As System.Nullable(Of Integer)
	
	Private _CellFormat_FormatString As String
	
	Private _GroupInterval As System.Nullable(Of Integer)
	
	Private _VIEW_ID As Integer
	
	Private _UnboundExpressionMode As System.Nullable(Of Integer)
	
	Private _UnboundExpression As String
	
	Private _UnboundColumnType As System.Nullable(Of Integer)
	
	Private _PivotSummaryDisplayType As System.Nullable(Of Integer)
	
	Private _tblReportUser_Templates As EntitySet(Of tblReportUser_Template)
	
	Private _tblReportMaster_Templates As EntitySet(Of tblReportMaster_Template)
	
	Private _tblReport_VIEW As EntityRef(Of tblReport_VIEW)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFIELD_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFIELD_IDChanged()
    End Sub
    Partial Private Sub OnFIELD_CAPTIONChanging(value As String)
    End Sub
    Partial Private Sub OnFIELD_CAPTIONChanged()
    End Sub
    Partial Private Sub OnFIELD_NAMEChanging(value As String)
    End Sub
    Partial Private Sub OnFIELD_NAMEChanged()
    End Sub
    Partial Private Sub OnSummaryTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSummaryTypeChanged()
    End Sub
    Partial Private Sub OnCellFormat_FormatTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCellFormat_FormatTypeChanged()
    End Sub
    Partial Private Sub OnCellFormat_FormatStringChanging(value As String)
    End Sub
    Partial Private Sub OnCellFormat_FormatStringChanged()
    End Sub
    Partial Private Sub OnGroupIntervalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGroupIntervalChanged()
    End Sub
    Partial Private Sub OnVIEW_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnVIEW_IDChanged()
    End Sub
    Partial Private Sub OnUnboundExpressionModeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUnboundExpressionModeChanged()
    End Sub
    Partial Private Sub OnUnboundExpressionChanging(value As String)
    End Sub
    Partial Private Sub OnUnboundExpressionChanged()
    End Sub
    Partial Private Sub OnUnboundColumnTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUnboundColumnTypeChanged()
    End Sub
    Partial Private Sub OnPivotSummaryDisplayTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPivotSummaryDisplayTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblReportUser_Templates = New EntitySet(Of tblReportUser_Template)(AddressOf Me.attach_tblReportUser_Templates, AddressOf Me.detach_tblReportUser_Templates)
		Me._tblReportMaster_Templates = New EntitySet(Of tblReportMaster_Template)(AddressOf Me.attach_tblReportMaster_Templates, AddressOf Me.detach_tblReportMaster_Templates)
		Me._tblReport_VIEW = CType(Nothing, EntityRef(Of tblReport_VIEW))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property FIELD_ID() As Integer
		Get
			Return Me._FIELD_ID
		End Get
		Set
			If ((Me._FIELD_ID = value)  _
						= false) Then
				Me.OnFIELD_IDChanging(value)
				Me.SendPropertyChanging
				Me._FIELD_ID = value
				Me.SendPropertyChanged("FIELD_ID")
				Me.OnFIELD_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD_CAPTION", DbType:="VarChar(50)")>  _
	Public Property FIELD_CAPTION() As String
		Get
			Return Me._FIELD_CAPTION
		End Get
		Set
			If (String.Equals(Me._FIELD_CAPTION, value) = false) Then
				Me.OnFIELD_CAPTIONChanging(value)
				Me.SendPropertyChanging
				Me._FIELD_CAPTION = value
				Me.SendPropertyChanged("FIELD_CAPTION")
				Me.OnFIELD_CAPTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD_NAME", DbType:="VarChar(50)")>  _
	Public Property FIELD_NAME() As String
		Get
			Return Me._FIELD_NAME
		End Get
		Set
			If (String.Equals(Me._FIELD_NAME, value) = false) Then
				Me.OnFIELD_NAMEChanging(value)
				Me.SendPropertyChanging
				Me._FIELD_NAME = value
				Me.SendPropertyChanged("FIELD_NAME")
				Me.OnFIELD_NAMEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SummaryType", DbType:="Int")>  _
	Public Property SummaryType() As System.Nullable(Of Integer)
		Get
			Return Me._SummaryType
		End Get
		Set
			If (Me._SummaryType.Equals(value) = false) Then
				Me.OnSummaryTypeChanging(value)
				Me.SendPropertyChanging
				Me._SummaryType = value
				Me.SendPropertyChanged("SummaryType")
				Me.OnSummaryTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CellFormat_FormatType", DbType:="Int")>  _
	Public Property CellFormat_FormatType() As System.Nullable(Of Integer)
		Get
			Return Me._CellFormat_FormatType
		End Get
		Set
			If (Me._CellFormat_FormatType.Equals(value) = false) Then
				Me.OnCellFormat_FormatTypeChanging(value)
				Me.SendPropertyChanging
				Me._CellFormat_FormatType = value
				Me.SendPropertyChanged("CellFormat_FormatType")
				Me.OnCellFormat_FormatTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CellFormat_FormatString", DbType:="VarChar(10)")>  _
	Public Property CellFormat_FormatString() As String
		Get
			Return Me._CellFormat_FormatString
		End Get
		Set
			If (String.Equals(Me._CellFormat_FormatString, value) = false) Then
				Me.OnCellFormat_FormatStringChanging(value)
				Me.SendPropertyChanging
				Me._CellFormat_FormatString = value
				Me.SendPropertyChanged("CellFormat_FormatString")
				Me.OnCellFormat_FormatStringChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupInterval", DbType:="Int")>  _
	Public Property GroupInterval() As System.Nullable(Of Integer)
		Get
			Return Me._GroupInterval
		End Get
		Set
			If (Me._GroupInterval.Equals(value) = false) Then
				Me.OnGroupIntervalChanging(value)
				Me.SendPropertyChanging
				Me._GroupInterval = value
				Me.SendPropertyChanged("GroupInterval")
				Me.OnGroupIntervalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VIEW_ID", DbType:="Int NOT NULL")>  _
	Public Property VIEW_ID() As Integer
		Get
			Return Me._VIEW_ID
		End Get
		Set
			If ((Me._VIEW_ID = value)  _
						= false) Then
				If Me._tblReport_VIEW.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVIEW_IDChanging(value)
				Me.SendPropertyChanging
				Me._VIEW_ID = value
				Me.SendPropertyChanged("VIEW_ID")
				Me.OnVIEW_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnboundExpressionMode", DbType:="Int")>  _
	Public Property UnboundExpressionMode() As System.Nullable(Of Integer)
		Get
			Return Me._UnboundExpressionMode
		End Get
		Set
			If (Me._UnboundExpressionMode.Equals(value) = false) Then
				Me.OnUnboundExpressionModeChanging(value)
				Me.SendPropertyChanging
				Me._UnboundExpressionMode = value
				Me.SendPropertyChanged("UnboundExpressionMode")
				Me.OnUnboundExpressionModeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnboundExpression", DbType:="VarChar(255)")>  _
	Public Property UnboundExpression() As String
		Get
			Return Me._UnboundExpression
		End Get
		Set
			If (String.Equals(Me._UnboundExpression, value) = false) Then
				Me.OnUnboundExpressionChanging(value)
				Me.SendPropertyChanging
				Me._UnboundExpression = value
				Me.SendPropertyChanged("UnboundExpression")
				Me.OnUnboundExpressionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnboundColumnType", DbType:="Int")>  _
	Public Property UnboundColumnType() As System.Nullable(Of Integer)
		Get
			Return Me._UnboundColumnType
		End Get
		Set
			If (Me._UnboundColumnType.Equals(value) = false) Then
				Me.OnUnboundColumnTypeChanging(value)
				Me.SendPropertyChanging
				Me._UnboundColumnType = value
				Me.SendPropertyChanged("UnboundColumnType")
				Me.OnUnboundColumnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PivotSummaryDisplayType", DbType:="Int")>  _
	Public Property PivotSummaryDisplayType() As System.Nullable(Of Integer)
		Get
			Return Me._PivotSummaryDisplayType
		End Get
		Set
			If (Me._PivotSummaryDisplayType.Equals(value) = false) Then
				Me.OnPivotSummaryDisplayTypeChanging(value)
				Me.SendPropertyChanging
				Me._PivotSummaryDisplayType = value
				Me.SendPropertyChanged("PivotSummaryDisplayType")
				Me.OnPivotSummaryDisplayTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReport_VIEWs_Field_tblReportUser_Template", Storage:="_tblReportUser_Templates", ThisKey:="FIELD_ID", OtherKey:="FIELD_ID")>  _
	Public Property tblReportUser_Templates() As EntitySet(Of tblReportUser_Template)
		Get
			Return Me._tblReportUser_Templates
		End Get
		Set
			Me._tblReportUser_Templates.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReport_VIEWs_Field_tblReportMaster_Template", Storage:="_tblReportMaster_Templates", ThisKey:="FIELD_ID", OtherKey:="FIELD_ID")>  _
	Public Property tblReportMaster_Templates() As EntitySet(Of tblReportMaster_Template)
		Get
			Return Me._tblReportMaster_Templates
		End Get
		Set
			Me._tblReportMaster_Templates.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblReport_VIEW_tblReport_VIEWs_Field", Storage:="_tblReport_VIEW", ThisKey:="VIEW_ID", OtherKey:="VIEW_ID", IsForeignKey:=true)>  _
	Public Property tblReport_VIEW() As tblReport_VIEW
		Get
			Return Me._tblReport_VIEW.Entity
		End Get
		Set
			Dim previousValue As tblReport_VIEW = Me._tblReport_VIEW.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblReport_VIEW.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblReport_VIEW.Entity = Nothing
					previousValue.tblReport_VIEWs_Fields.Remove(Me)
				End If
				Me._tblReport_VIEW.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblReport_VIEWs_Fields.Add(Me)
					Me._VIEW_ID = value.VIEW_ID
				Else
					Me._VIEW_ID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblReport_VIEW")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblReportUser_Templates(ByVal entity As tblReportUser_Template)
		Me.SendPropertyChanging
		entity.tblReport_VIEWs_Field = Me
	End Sub
	
	Private Sub detach_tblReportUser_Templates(ByVal entity As tblReportUser_Template)
		Me.SendPropertyChanging
		entity.tblReport_VIEWs_Field = Nothing
	End Sub
	
	Private Sub attach_tblReportMaster_Templates(ByVal entity As tblReportMaster_Template)
		Me.SendPropertyChanging
		entity.tblReport_VIEWs_Field = Me
	End Sub
	
	Private Sub detach_tblReportMaster_Templates(ByVal entity As tblReportMaster_Template)
		Me.SendPropertyChanging
		entity.tblReport_VIEWs_Field = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_REPORT_MASTER_TEMPLATE")>  _
Partial Public Class V_REPORT_MASTER_TEMPLATE
	
	Private _FIELD_ID As Integer
	
	Private _FIELD_CAPTION As String
	
	Private _FIELD_NAME As String
	
	Private _SummaryType As System.Nullable(Of Integer)
	
	Private _PivotSummaryDisplayType As System.Nullable(Of Integer)
	
	Private _CellFormat_FormatType As System.Nullable(Of Integer)
	
	Private _CellFormat_FormatString As String
	
	Private _UnboundExpressionMode As System.Nullable(Of Integer)
	
	Private _UnboundExpression As String
	
	Private _UnboundColumnType As System.Nullable(Of Integer)
	
	Private _GroupInterval As System.Nullable(Of Integer)
	
	Private _RID As Integer
	
	Private _MASTER_ID As System.Nullable(Of Integer)
	
	Private _AREA As System.Nullable(Of Integer)
	
	Private _ORDERBY As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD_ID", DbType:="Int NOT NULL")>  _
	Public Property FIELD_ID() As Integer
		Get
			Return Me._FIELD_ID
		End Get
		Set
			If ((Me._FIELD_ID = value)  _
						= false) Then
				Me._FIELD_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD_CAPTION", DbType:="VarChar(50)")>  _
	Public Property FIELD_CAPTION() As String
		Get
			Return Me._FIELD_CAPTION
		End Get
		Set
			If (String.Equals(Me._FIELD_CAPTION, value) = false) Then
				Me._FIELD_CAPTION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD_NAME", DbType:="VarChar(50)")>  _
	Public Property FIELD_NAME() As String
		Get
			Return Me._FIELD_NAME
		End Get
		Set
			If (String.Equals(Me._FIELD_NAME, value) = false) Then
				Me._FIELD_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SummaryType", DbType:="Int")>  _
	Public Property SummaryType() As System.Nullable(Of Integer)
		Get
			Return Me._SummaryType
		End Get
		Set
			If (Me._SummaryType.Equals(value) = false) Then
				Me._SummaryType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PivotSummaryDisplayType", DbType:="Int")>  _
	Public Property PivotSummaryDisplayType() As System.Nullable(Of Integer)
		Get
			Return Me._PivotSummaryDisplayType
		End Get
		Set
			If (Me._PivotSummaryDisplayType.Equals(value) = false) Then
				Me._PivotSummaryDisplayType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CellFormat_FormatType", DbType:="Int")>  _
	Public Property CellFormat_FormatType() As System.Nullable(Of Integer)
		Get
			Return Me._CellFormat_FormatType
		End Get
		Set
			If (Me._CellFormat_FormatType.Equals(value) = false) Then
				Me._CellFormat_FormatType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CellFormat_FormatString", DbType:="VarChar(10)")>  _
	Public Property CellFormat_FormatString() As String
		Get
			Return Me._CellFormat_FormatString
		End Get
		Set
			If (String.Equals(Me._CellFormat_FormatString, value) = false) Then
				Me._CellFormat_FormatString = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnboundExpressionMode", DbType:="Int")>  _
	Public Property UnboundExpressionMode() As System.Nullable(Of Integer)
		Get
			Return Me._UnboundExpressionMode
		End Get
		Set
			If (Me._UnboundExpressionMode.Equals(value) = false) Then
				Me._UnboundExpressionMode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnboundExpression", DbType:="VarChar(255)")>  _
	Public Property UnboundExpression() As String
		Get
			Return Me._UnboundExpression
		End Get
		Set
			If (String.Equals(Me._UnboundExpression, value) = false) Then
				Me._UnboundExpression = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnboundColumnType", DbType:="Int")>  _
	Public Property UnboundColumnType() As System.Nullable(Of Integer)
		Get
			Return Me._UnboundColumnType
		End Get
		Set
			If (Me._UnboundColumnType.Equals(value) = false) Then
				Me._UnboundColumnType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupInterval", DbType:="Int")>  _
	Public Property GroupInterval() As System.Nullable(Of Integer)
		Get
			Return Me._GroupInterval
		End Get
		Set
			If (Me._GroupInterval.Equals(value) = false) Then
				Me._GroupInterval = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", DbType:="Int NOT NULL")>  _
	Public Property RID() As Integer
		Get
			Return Me._RID
		End Get
		Set
			If ((Me._RID = value)  _
						= false) Then
				Me._RID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MASTER_ID", DbType:="Int")>  _
	Public Property MASTER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._MASTER_ID
		End Get
		Set
			If (Me._MASTER_ID.Equals(value) = false) Then
				Me._MASTER_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREA", DbType:="Int")>  _
	Public Property AREA() As System.Nullable(Of Integer)
		Get
			Return Me._AREA
		End Get
		Set
			If (Me._AREA.Equals(value) = false) Then
				Me._AREA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDERBY", DbType:="Int")>  _
	Public Property ORDERBY() As System.Nullable(Of Integer)
		Get
			Return Me._ORDERBY
		End Get
		Set
			If (Me._ORDERBY.Equals(value) = false) Then
				Me._ORDERBY = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.V_REPORT_USER_TEMPLATE")>  _
Partial Public Class V_REPORT_USER_TEMPLATE
	
	Private _FIELD_ID As Integer
	
	Private _TEMPLATE_CAPTION As String
	
	Private _TEMPLATE_NAME As String
	
	Private _SummaryType As System.Nullable(Of Integer)
	
	Private _PivotSummaryDisplayType As System.Nullable(Of Integer)
	
	Private _CellFormat_FormatType As System.Nullable(Of Integer)
	
	Private _CellFormat_FormatString As String
	
	Private _UnboundExpressionMode As System.Nullable(Of Integer)
	
	Private _UnboundExpression As String
	
	Private _UnboundColumnType As System.Nullable(Of Integer)
	
	Private _GroupInterval As System.Nullable(Of Integer)
	
	Private _RID As Integer
	
	Private _MASTER_ID As System.Nullable(Of Integer)
	
	Private _TEMPLATE_AREA As System.Nullable(Of Integer)
	
	Private _TEMPLATE_ORDERBY As System.Nullable(Of Integer)
	
	Private _ID As Integer
	
	Private _OWNER As String
	
	Private _AREA As Integer
	
	Private _ORDERBY As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FIELD_ID", DbType:="Int NOT NULL")>  _
	Public Property FIELD_ID() As Integer
		Get
			Return Me._FIELD_ID
		End Get
		Set
			If ((Me._FIELD_ID = value)  _
						= false) Then
				Me._FIELD_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEMPLATE_CAPTION", DbType:="VarChar(50)")>  _
	Public Property TEMPLATE_CAPTION() As String
		Get
			Return Me._TEMPLATE_CAPTION
		End Get
		Set
			If (String.Equals(Me._TEMPLATE_CAPTION, value) = false) Then
				Me._TEMPLATE_CAPTION = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEMPLATE_NAME", DbType:="VarChar(50)")>  _
	Public Property TEMPLATE_NAME() As String
		Get
			Return Me._TEMPLATE_NAME
		End Get
		Set
			If (String.Equals(Me._TEMPLATE_NAME, value) = false) Then
				Me._TEMPLATE_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SummaryType", DbType:="Int")>  _
	Public Property SummaryType() As System.Nullable(Of Integer)
		Get
			Return Me._SummaryType
		End Get
		Set
			If (Me._SummaryType.Equals(value) = false) Then
				Me._SummaryType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PivotSummaryDisplayType", DbType:="Int")>  _
	Public Property PivotSummaryDisplayType() As System.Nullable(Of Integer)
		Get
			Return Me._PivotSummaryDisplayType
		End Get
		Set
			If (Me._PivotSummaryDisplayType.Equals(value) = false) Then
				Me._PivotSummaryDisplayType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CellFormat_FormatType", DbType:="Int")>  _
	Public Property CellFormat_FormatType() As System.Nullable(Of Integer)
		Get
			Return Me._CellFormat_FormatType
		End Get
		Set
			If (Me._CellFormat_FormatType.Equals(value) = false) Then
				Me._CellFormat_FormatType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CellFormat_FormatString", DbType:="VarChar(10)")>  _
	Public Property CellFormat_FormatString() As String
		Get
			Return Me._CellFormat_FormatString
		End Get
		Set
			If (String.Equals(Me._CellFormat_FormatString, value) = false) Then
				Me._CellFormat_FormatString = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnboundExpressionMode", DbType:="Int")>  _
	Public Property UnboundExpressionMode() As System.Nullable(Of Integer)
		Get
			Return Me._UnboundExpressionMode
		End Get
		Set
			If (Me._UnboundExpressionMode.Equals(value) = false) Then
				Me._UnboundExpressionMode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnboundExpression", DbType:="VarChar(255)")>  _
	Public Property UnboundExpression() As String
		Get
			Return Me._UnboundExpression
		End Get
		Set
			If (String.Equals(Me._UnboundExpression, value) = false) Then
				Me._UnboundExpression = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnboundColumnType", DbType:="Int")>  _
	Public Property UnboundColumnType() As System.Nullable(Of Integer)
		Get
			Return Me._UnboundColumnType
		End Get
		Set
			If (Me._UnboundColumnType.Equals(value) = false) Then
				Me._UnboundColumnType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupInterval", DbType:="Int")>  _
	Public Property GroupInterval() As System.Nullable(Of Integer)
		Get
			Return Me._GroupInterval
		End Get
		Set
			If (Me._GroupInterval.Equals(value) = false) Then
				Me._GroupInterval = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RID", DbType:="Int NOT NULL")>  _
	Public Property RID() As Integer
		Get
			Return Me._RID
		End Get
		Set
			If ((Me._RID = value)  _
						= false) Then
				Me._RID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MASTER_ID", DbType:="Int")>  _
	Public Property MASTER_ID() As System.Nullable(Of Integer)
		Get
			Return Me._MASTER_ID
		End Get
		Set
			If (Me._MASTER_ID.Equals(value) = false) Then
				Me._MASTER_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEMPLATE_AREA", DbType:="Int")>  _
	Public Property TEMPLATE_AREA() As System.Nullable(Of Integer)
		Get
			Return Me._TEMPLATE_AREA
		End Get
		Set
			If (Me._TEMPLATE_AREA.Equals(value) = false) Then
				Me._TEMPLATE_AREA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TEMPLATE_ORDERBY", DbType:="Int")>  _
	Public Property TEMPLATE_ORDERBY() As System.Nullable(Of Integer)
		Get
			Return Me._TEMPLATE_ORDERBY
		End Get
		Set
			If (Me._TEMPLATE_ORDERBY.Equals(value) = false) Then
				Me._TEMPLATE_ORDERBY = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="Int NOT NULL")>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OWNER", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property OWNER() As String
		Get
			Return Me._OWNER
		End Get
		Set
			If (String.Equals(Me._OWNER, value) = false) Then
				Me._OWNER = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AREA", DbType:="Int NOT NULL")>  _
	Public Property AREA() As Integer
		Get
			Return Me._AREA
		End Get
		Set
			If ((Me._AREA = value)  _
						= false) Then
				Me._AREA = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORDERBY", DbType:="Int")>  _
	Public Property ORDERBY() As System.Nullable(Of Integer)
		Get
			Return Me._ORDERBY
		End Get
		Set
			If (Me._ORDERBY.Equals(value) = false) Then
				Me._ORDERBY = value
			End If
		End Set
	End Property
End Class
