'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Portal")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttblInnovation(instance As tblInnovation)
    End Sub
  Partial Private Sub UpdatetblInnovation(instance As tblInnovation)
    End Sub
  Partial Private Sub DeletetblInnovation(instance As tblInnovation)
    End Sub
  Partial Private Sub InserttblPokemon(instance As tblPokemon)
    End Sub
  Partial Private Sub UpdatetblPokemon(instance As tblPokemon)
    End Sub
  Partial Private Sub DeletetblPokemon(instance As tblPokemon)
    End Sub
  Partial Private Sub InserttblInnovation_Result(instance As tblInnovation_Result)
    End Sub
  Partial Private Sub UpdatetblInnovation_Result(instance As tblInnovation_Result)
    End Sub
  Partial Private Sub DeletetblInnovation_Result(instance As tblInnovation_Result)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("PortalConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tblInnovations() As System.Data.Linq.Table(Of tblInnovation)
		Get
			Return Me.GetTable(Of tblInnovation)
		End Get
	End Property
	
	Public ReadOnly Property tblPokemons() As System.Data.Linq.Table(Of tblPokemon)
		Get
			Return Me.GetTable(Of tblPokemon)
		End Get
	End Property
	
	Public ReadOnly Property tblInnovation_Results() As System.Data.Linq.Table(Of tblInnovation_Result)
		Get
			Return Me.GetTable(Of tblInnovation_Result)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblInnovation")>  _
Partial Public Class tblInnovation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Name As String
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _EndTime As System.Nullable(Of Date)
	
	Private _IsStart As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnEndTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndTimeChanged()
    End Sub
    Partial Private Sub OnIsStartChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsStartChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(200)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>  _
	Public Property EndTime() As System.Nullable(Of Date)
		Get
			Return Me._EndTime
		End Get
		Set
			If (Me._EndTime.Equals(value) = false) Then
				Me.OnEndTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndTime = value
				Me.SendPropertyChanged("EndTime")
				Me.OnEndTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsStart", DbType:="Bit")>  _
	Public Property IsStart() As System.Nullable(Of Boolean)
		Get
			Return Me._IsStart
		End Get
		Set
			If (Me._IsStart.Equals(value) = false) Then
				Me.OnIsStartChanging(value)
				Me.SendPropertyChanging
				Me._IsStart = value
				Me.SendPropertyChanged("IsStart")
				Me.OnIsStartChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblPokemon")>  _
Partial Public Class tblPokemon
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PokeID As Integer
	
	Private _Pokemon As String
	
	Private _PokeHP As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPokeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPokeIDChanged()
    End Sub
    Partial Private Sub OnPokemonChanging(value As String)
    End Sub
    Partial Private Sub OnPokemonChanged()
    End Sub
    Partial Private Sub OnPokeHPChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPokeHPChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PokeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PokeID() As Integer
		Get
			Return Me._PokeID
		End Get
		Set
			If ((Me._PokeID = value)  _
						= false) Then
				Me.OnPokeIDChanging(value)
				Me.SendPropertyChanging
				Me._PokeID = value
				Me.SendPropertyChanged("PokeID")
				Me.OnPokeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pokemon", DbType:="VarChar(50)")>  _
	Public Property Pokemon() As String
		Get
			Return Me._Pokemon
		End Get
		Set
			If (String.Equals(Me._Pokemon, value) = false) Then
				Me.OnPokemonChanging(value)
				Me.SendPropertyChanging
				Me._Pokemon = value
				Me.SendPropertyChanged("Pokemon")
				Me.OnPokemonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PokeHP", DbType:="Int")>  _
	Public Property PokeHP() As System.Nullable(Of Integer)
		Get
			Return Me._PokeHP
		End Get
		Set
			If (Me._PokeHP.Equals(value) = false) Then
				Me.OnPokeHPChanging(value)
				Me.SendPropertyChanging
				Me._PokeHP = value
				Me.SendPropertyChanged("PokeHP")
				Me.OnPokeHPChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblInnovation_Result")>  _
Partial Public Class tblInnovation_Result
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _InnovationID As System.Nullable(Of Integer)
	
	Private _IP As String
	
	Private _AccountName As String
	
	Private _ResultDate As System.Nullable(Of Date)
	
	Private _Result1 As System.Nullable(Of Integer)
	
	Private _Result2 As System.Nullable(Of Integer)
	
	Private _Pokemon As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnInnovationIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInnovationIDChanged()
    End Sub
    Partial Private Sub OnIPChanging(value As String)
    End Sub
    Partial Private Sub OnIPChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnResultDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnResultDateChanged()
    End Sub
    Partial Private Sub OnResult1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnResult1Changed()
    End Sub
    Partial Private Sub OnResult2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnResult2Changed()
    End Sub
    Partial Private Sub OnPokemonChanging(value As String)
    End Sub
    Partial Private Sub OnPokemonChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InnovationID", DbType:="Int")>  _
	Public Property InnovationID() As System.Nullable(Of Integer)
		Get
			Return Me._InnovationID
		End Get
		Set
			If (Me._InnovationID.Equals(value) = false) Then
				Me.OnInnovationIDChanging(value)
				Me.SendPropertyChanging
				Me._InnovationID = value
				Me.SendPropertyChanged("InnovationID")
				Me.OnInnovationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IP", DbType:="VarChar(50)")>  _
	Public Property IP() As String
		Get
			Return Me._IP
		End Get
		Set
			If (String.Equals(Me._IP, value) = false) Then
				Me.OnIPChanging(value)
				Me.SendPropertyChanging
				Me._IP = value
				Me.SendPropertyChanged("IP")
				Me.OnIPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="VarChar(200)")>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResultDate", DbType:="DateTime")>  _
	Public Property ResultDate() As System.Nullable(Of Date)
		Get
			Return Me._ResultDate
		End Get
		Set
			If (Me._ResultDate.Equals(value) = false) Then
				Me.OnResultDateChanging(value)
				Me.SendPropertyChanging
				Me._ResultDate = value
				Me.SendPropertyChanged("ResultDate")
				Me.OnResultDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Result1", DbType:="Int")>  _
	Public Property Result1() As System.Nullable(Of Integer)
		Get
			Return Me._Result1
		End Get
		Set
			If (Me._Result1.Equals(value) = false) Then
				Me.OnResult1Changing(value)
				Me.SendPropertyChanging
				Me._Result1 = value
				Me.SendPropertyChanged("Result1")
				Me.OnResult1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Result2", DbType:="Int")>  _
	Public Property Result2() As System.Nullable(Of Integer)
		Get
			Return Me._Result2
		End Get
		Set
			If (Me._Result2.Equals(value) = false) Then
				Me.OnResult2Changing(value)
				Me.SendPropertyChanging
				Me._Result2 = value
				Me.SendPropertyChanged("Result2")
				Me.OnResult2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pokemon", DbType:="VarChar(50)")>  _
	Public Property Pokemon() As String
		Get
			Return Me._Pokemon
		End Get
		Set
			If (String.Equals(Me._Pokemon, value) = false) Then
				Me.OnPokemonChanging(value)
				Me.SendPropertyChanging
				Me._Pokemon = value
				Me.SendPropertyChanged("Pokemon")
				Me.OnPokemonChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
